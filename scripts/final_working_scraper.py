#!/usr/bin/env python3
"""–§–ò–ù–ê–õ–¨–ù–´–ô –†–ê–ë–û–ß–ò–ô –ü–ê–†–°–ï–† —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏."""

import asyncio
import re
import sys
from pathlib import Path
from decimal import Decimal
from playwright.async_api import async_playwright

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from app.utils.logger import setup_logger
from app.utils.storage import DataExporter
from app.models import FoodItem, ScrapingResult


async def final_working_scraper():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø–∞—Ä—Å–µ—Ä –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤."""
    setup_logger(level="INFO")
    
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ê–ë–û–ß–ò–ô –ü–ê–†–°–ï–†")
    print("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("=" * 60)
    
    # –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    playwright = await async_playwright().start()
    browser = await playwright.firefox.launch(
        headless=False,  # –í–∏–¥–∏–º—ã–π –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
        firefox_user_prefs={
            "dom.webdriver.enabled": False,
            "useAutomationExtension": False
        }
    )
    
    context = await browser.new_context(
        user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/119.0",
        locale='ru-RU',
        timezone_id='Europe/Moscow'
    )
    
    results = []
    
    # 1. –°–ê–ú–û–ö–ê–¢
    print("\nüì¶ –°–ê–ú–û–ö–ê–¢")
    print("-" * 30)
    
    try:
        samokat_items = await scrape_samokat(context)
        if samokat_items:
            result = create_result("samokat", samokat_items)
            results.append(result)
            print(f"‚úÖ –°–∞–º–æ–∫–∞—Ç: {len(samokat_items)} —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            print("‚ùå –°–∞–º–æ–∫–∞—Ç: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –°–∞–º–æ–∫–∞—Ç: –æ—à–∏–±–∫–∞ - {e}")
    
    # 2. –õ–ê–í–ö–ê
    print("\nüì¶ –õ–ê–í–ö–ê")
    print("-" * 30)
    
    try:
        lavka_items = await scrape_lavka(context)
        if lavka_items:
            result = create_result("lavka", lavka_items)
            results.append(result)
            print(f"‚úÖ –õ–∞–≤–∫–∞: {len(lavka_items)} —Ç–æ–≤–∞—Ä–æ–≤")
        else:
            print("‚ùå –õ–∞–≤–∫–∞: —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –õ–∞–≤–∫–∞: –æ—à–∏–±–∫–∞ - {e}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç
    if results:
        print(f"\nüíæ –≠–ö–°–ü–û–†–¢")
        print("-" * 30)
        
        exporter = DataExporter("data")
        exported_files = exporter.export_results(
            results,
            filename_prefix="FINAL_working",
            formats=["csv", "json"]
        )
        
        print("‚úÖ –§–∞–π–ª—ã:")
        for format_name, file_path in exported_files.items():
            print(f"  üìÑ {format_name.upper()}: {file_path}")
        
        total = sum(r.successful for r in results)
        print(f"\nüéâ –í–°–ï–ì–û: {total} —Ç–æ–≤–∞—Ä–æ–≤")
    
    await context.close()
    await browser.close()
    await playwright.stop()
    
    return results


async def scrape_samokat(context):
    """–ü–∞—Ä—Å–∏–Ω–≥ –°–∞–º–æ–∫–∞—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏."""
    page = await context.new_page()
    
    try:
        print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –°–∞–º–æ–∫–∞—Ç...")
        await page.goto("https://samokat.ru/category/vsya-gotovaya-eda-13", wait_until="domcontentloaded")
        await asyncio.sleep(10)
        
        title = await page.title()
        print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        print("üîÑ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞...")
        for i in range(5):
            await page.mouse.wheel(0, 3000)
            await asyncio.sleep(1)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
        elements = await page.locator('a[href*="/product/"]').all()
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ç–æ–≤–∞—Ä—ã: {len(elements)}")
        
        items = []
        for i, element in enumerate(elements[:50]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
            try:
                item_data = await extract_samokat_data(element)
                if item_data:
                    items.append(item_data)
                    if len(items) % 10 == 0:
                        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤...")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞ {i}: {e}")
        
        return items
        
    finally:
        await page.close()


async def scrape_lavka(context):
    """–ü–∞—Ä—Å–∏–Ω–≥ –õ–∞–≤–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏."""
    page = await context.new_page()
    
    try:
        print("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –õ–∞–≤–∫—É...")
        await page.goto("https://lavka.yandex.ru/category/gotovaya_eda", wait_until="domcontentloaded")
        
        title = await page.title()
        print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ø—á—É
        if "—Ä–æ–±–æ—Ç" in title.lower():
            print("üõ°Ô∏è –ö–ê–ü–ß–ê! –ü—Ä–æ–π–¥–∏—Ç–µ '–Ø –Ω–µ —Ä–æ–±–æ—Ç' (60 —Å–µ–∫)...")
            for i in range(60, 0, -10):
                print(f"‚è∞ {i} —Å–µ–∫...")
                await asyncio.sleep(10)
                current_title = await page.title()
                if "—Ä–æ–±–æ—Ç" not in current_title.lower():
                    print("‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")
                    break
            else:
                print("‚ùå –ö–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                return []
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –õ–Æ–ë–û–ô –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–¥—Ä–µ—Å
        print("üìç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—é–±–æ–π –∞–¥—Ä–µ—Å...")
        try:
            # –ò—â–µ–º –ª—é–±—ã–µ –∫–Ω–æ–ø–∫–∏/—Å—Å—ã–ª–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–¥—Ä–µ—Å–æ–º
            address_elements = await page.locator('button, a, div').filter(has_text=re.compile(r'–∞–¥—Ä–µ—Å|–¥–æ—Å—Ç–∞–≤–∫–∞|–≤—ã–±—Ä–∞—Ç—å', re.IGNORECASE)).all()
            
            if address_elements:
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(address_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–¥—Ä–µ—Å–∞")
                for element in address_elements[:3]:  # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—ã–µ 3
                    try:
                        await element.click()
                        await asyncio.sleep(3)
                        print("‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∞–¥—Ä–µ—Å–∞")
                        break
                    except:
                        continue
            
            # –ò—â–µ–º –ª—é–±–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –≤–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å
            input_elements = await page.locator('input[type="text"], input[placeholder*="–¥—Ä–µ—Å"], input[placeholder*="–≥–æ—Ä–æ–¥"]').all()
            
            if input_elements:
                for input_el in input_elements[:2]:
                    try:
                        await input_el.click()
                        await input_el.fill("–ú–æ—Å–∫–≤–∞")
                        await asyncio.sleep(2)
                        await input_el.press('Enter')
                        print("‚úÖ –í–≤–µ–ª–∏ –∞–¥—Ä–µ—Å –≤ –ø–æ–ª–µ")
                        break
                    except:
                        continue
            
            # –ò—â–µ–º –ª—é–±—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm_elements = await page.locator('button').filter(has_text=re.compile(r'–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|–≤—ã–±—Ä–∞—Ç—å|–≥–æ—Ç–æ–≤–æ|–¥–∞|–æ–∫', re.IGNORECASE)).all()
            
            if confirm_elements:
                for button in confirm_elements[:2]:
                    try:
                        await button.click()
                        await asyncio.sleep(2)
                        print("‚úÖ –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                        break
                    except:
                        continue
            
            print("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        
        print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ (20 —Å–µ–∫)...")
        
        await asyncio.sleep(10)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        print("üîÑ –ü—Ä–æ–∫—Ä—É—Ç–∫–∞...")
        for i in range(10):
            await page.mouse.wheel(0, 2000)
            await asyncio.sleep(1)
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        print("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        selectors = [
            'a[href*="/product/"]',
            'a[href*="/goods/"]',
            '[data-testid*="product"]',
            '[class*="Product"]',
            '[class*="Item"]'
        ]
        
        best_elements = []
        for selector in selectors:
            try:
                elements = await page.locator(selector).all()
                print(f"   {selector}: {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                if len(elements) > len(best_elements):
                    best_elements = elements
            except:
                continue
        
        if not best_elements:
            print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        items = []
        for i, element in enumerate(best_elements[:50]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
            try:
                item_data = await extract_lavka_data(element)
                if item_data:
                    items.append(item_data)
                    if len(items) % 10 == 0:
                        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(items)} —Ç–æ–≤–∞—Ä–æ–≤...")
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞ {i}: {e}")
        
        return items
        
    finally:
        await page.close()


async def extract_samokat_data(element):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –°–∞–º–æ–∫–∞—Ç."""
    try:
        # URL —Ç–æ–≤–∞—Ä–∞
        href = await element.get_attribute('href')
        url = f"https://samokat.ru{href}" if href.startswith('/') else href
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ URL
        name = url_to_name(url, "samokat")
        
        # –¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
        text = await element.inner_text()
        
        # –¶–µ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        price = extract_price_from_text(text)
        
        # –í–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ URL
        weight = extract_weight_from_text(text) or extract_weight_from_text(url)
        
        return {
            'id': f"samokat:{generate_id(name)}",
            'name': name,
            'category': '–≥–æ—Ç–æ–≤–∞—è –µ–¥–∞',
            'price': price or Decimal("0"),
            'shop': 'samokat',
            'url': url,
            'photo_url': None,
            'portion_g': weight,
            'tags': [],
            'composition': None,
            'kcal_100g': None,
            'protein_100g': None,
            'fat_100g': None,
            'carb_100g': None,
            'city': "–ú–æ—Å–∫–≤–∞",
            'address': "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1"
        }
        
    except Exception as e:
        return None


async def extract_lavka_data(element):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –õ–∞–≤–∫–∞."""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É
        url = None
        try:
            if hasattr(element, 'get_attribute'):
                href = await element.get_attribute('href')
                if href:
                    url = f"https://lavka.yandex.ru{href}" if href.startswith('/') else href
        except:
            pass
        
        # –¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
        text = await element.inner_text()
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        name = None
        for line in lines:
            if len(line) > 5 and not re.match(r'^[\d\s‚ÇΩ]+$', line):
                name = line
                break
        
        if not name:
            name = f"–¢–æ–≤–∞—Ä –õ–∞–≤–∫–∞ {generate_id(text)}"
        
        # –¶–µ–Ω–∞
        price = extract_price_from_text(text)
        
        # –í–µ—Å
        weight = extract_weight_from_text(text)
        
        if not url:
            url = f"https://lavka.yandex.ru/product/{generate_id(name)}"
        
        return {
            'id': f"lavka:{generate_id(name)}",
            'name': name,
            'category': '–≥–æ—Ç–æ–≤–∞—è –µ–¥–∞',
            'price': price or Decimal("0"),
            'shop': 'lavka',
            'url': url,
            'photo_url': None,
            'portion_g': weight,
            'tags': [],
            'composition': None,
            'kcal_100g': None,
            'protein_100g': None,
            'fat_100g': None,
            'carb_100g': None,
            'city': "–ú–æ—Å–∫–≤–∞",
            'address': "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1"
        }
        
    except Exception as e:
        return None


def url_to_name(url: str, shop: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ URL –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ."""
    try:
        if shop == "samokat":
            # https://samokat.ru/product/salat-tsezar -> –°–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å
            if '/product/' in url:
                name_part = url.split('/product/')[-1]
                name = name_part.replace('-', ' ').title()
                return name
        
        return f"–¢–æ–≤–∞—Ä {shop.title()}"
    except:
        return f"–¢–æ–≤–∞—Ä {shop.title()}"


def extract_price_from_text(text: str) -> Decimal:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    try:
        # –ò—â–µ–º —Ü–µ–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        price_patterns = [
            r'(\d{1,4})\s*‚ÇΩ',  # –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞ 299‚ÇΩ
            r'(\d{1,4})\s*—Ä—É–±',  # 299 —Ä—É–±
            r'‚ÇΩ\s*(\d{1,4})',  # ‚ÇΩ299
            r'(\d{1,3}[.,]\d{2})\s*‚ÇΩ',  # 299.50‚ÇΩ
        ]
        
        for pattern in price_patterns:
            price_match = re.search(pattern, text)
            if price_match:
                price_str = price_match.group(1).replace(',', '.').replace(' ', '')
                price_val = float(price_str)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã (–æ—Ç 50 –¥–æ 2000 —Ä—É–±–ª–µ–π)
                if 50 <= price_val <= 2000:
                    return Decimal(str(price_val))
    except:
        pass
    return Decimal("0")


def extract_weight_from_text(text: str) -> Decimal:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    try:
        weight_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–≥', text)
        if weight_match:
            return Decimal(weight_match.group(1).replace(',', '.'))
    except:
        pass
    return None


def generate_id(text: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∏–∑ —Ç–µ–∫—Å—Ç–∞."""
    clean_text = re.sub(r'[^\w\-]', '-', text.lower())[:30]
    return clean_text


def create_result(shop: str, items: list) -> ScrapingResult:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    food_items = []
    for item_data in items:
        try:
            food_item = FoodItem(**item_data)
            food_items.append(food_item)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FoodItem: {e}")
    
    return ScrapingResult(
        shop=shop,
        items=food_items,
        total_found=len(items),
        successful=len(food_items),
        failed=len(items) - len(food_items),
        errors=[],
        duration_seconds=60.0
    )


if __name__ == "__main__":
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ê–ë–û–ß–ò–ô –ü–ê–†–°–ï–†")
    print("üõ°Ô∏è –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É –≤ –õ–∞–≤–∫–µ!")
    
    input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞...")
    
    results = asyncio.run(final_working_scraper())
    
    if results:
        total = sum(r.successful for r in results)
        print(f"\nüéâ –£–°–ü–ï–•! –°–æ–±—Ä–∞–Ω–æ {total} —Ç–æ–≤–∞—Ä–æ–≤")
        print("üîç –§–∞–π–ª—ã: FINAL_working.csv –≤ data/")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –í–∫—É—Å–í–∏–ª–ª
        print(f"\nüìä –ò–¢–û–ì–û –° –ì–û–¢–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò:")
        print(f"   –í–∫—É—Å–í–∏–ª–ª: 275 —Ç–æ–≤–∞—Ä–æ–≤ (–≥–æ—Ç–æ–≤—ã–µ)")
        print(f"   –ù–æ–≤—ã–µ: {total} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"   –í–°–ï–ì–û: {275 + total} —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        print(f"\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: data/FINAL_real_foods.csv (275 —Ç–æ–≤–∞—Ä–æ–≤)")
        exit(1)
