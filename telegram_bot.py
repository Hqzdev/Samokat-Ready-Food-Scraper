#!/usr/bin/env python3
"""
ü§ñ –ü–†–û–°–¢–û–ô TELEGRAM –ë–û–¢ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê –í–ö–£–°–í–ò–õ–õ
–¢–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É.
"""

import asyncio
import logging
import os
import sys
import time
from pathlib import Path

# Telegram Bot API
try:
    from telegram import Update
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
except ImportError:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ python-telegram-bot: pip install python-telegram-bot==20.3")
    sys.exit(1)

import subprocess


class VkusvillSimpleBot:
    """–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –í–∫—É—Å–í–∏–ª–ª."""
    
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("parse", self.parse_command))
        self.app.add_handler(CommandHandler("deep", self.deep_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
        self.app.add_handler(MessageHandler(filters.LOCATION, self.location_handler))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start."""
        welcome_text = """
ü§ñ **–í–∫—É—Å–í–∏–ª–ª –ü–∞—Ä—Å–µ—Ä –ë–æ—Ç**

‚ö° `/parse –∞–¥—Ä–µ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ` - –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (—Å–µ–∫—É–Ω–¥—ã)
üîç `/deep –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ` - –ì–ª—É–±–æ–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ (–º–∏–Ω—É—Ç—ã)
üìç **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é** - –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
üìä `/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã  
‚ùì `/help` - –ü–æ–º–æ—â—å

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/parse –ú–æ—Å–∫–≤–∞,–ê—Ä–±–∞—Ç,15 1500`
‚Ä¢ `/parse 55.7558,37.6176 1000`
‚Ä¢ `/deep 1000`
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é ‚Üí –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤

–ë—ã—Å—Ç—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—É—é –±–∞–∑—É, –≥–ª—É–±–æ–∫–∏–π –ø–∞—Ä—Å–∏—Ç —Å–∞–π—Ç –∑–∞–Ω–æ–≤–æ.
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help."""
        help_text = """
üìñ **–ü–û–ú–û–©–¨**

‚ö° **–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–µ—Ä** `/parse`
‚Ä¢ –§–æ—Ä–º–∞—Ç: `/parse –∞–¥—Ä–µ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`
‚Ä¢ –í—Ä–µ–º—è: 5-15 —Å–µ–∫—É–Ω–¥
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 95%+ –ë–ñ–£ –¥–∞–Ω–Ω—ã—Ö

üîç **–ì–ª—É–±–æ–∫–∏–π –ø–∞—Ä—Å–µ—Ä** `/deep`
‚Ä¢ –§–æ—Ä–º–∞—Ç: `/deep –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`
‚Ä¢ –í—Ä–µ–º—è: 15-40 –º–∏–Ω—É—Ç
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: 91%+ –ë–ñ–£ –¥–∞–Ω–Ω—ã—Ö

üìç **–°–ø–æ—Å–æ–±—ã —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–∞:**
‚Ä¢ –ê–¥—Ä–µ—Å: `–ú–æ—Å–∫–≤–∞,–ö—Ä–∞—Å–Ω–∞—è-–ø–ª–æ—â–∞–¥—å,1`
‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: `55.7558,37.6176`
‚Ä¢ **–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è**: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ

üó∫Ô∏è **–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è:**
1. –ù–∞–∂–º–∏—Ç–µ üìé ‚Üí –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö

‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π: ~100-200 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É
‚Ä¢ –ì–ª—É–±–æ–∫–∏–π: –¥–æ 1500 —Ç–æ–≤–∞—Ä–æ–≤
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def parse_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ /parse."""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if len(context.args) < 2:
                await update.message.reply_text(
                    "‚ùå –§–æ—Ä–º–∞—Ç: `/parse –∞–¥—Ä–µ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ `/parse –ú–æ—Å–∫–≤–∞,–ê—Ä–±–∞—Ç,15 1500`\n"
                    "‚Ä¢ `/parse 55.7558,37.6176 1000`",
                    parse_mode='Markdown'
                )
                return
            
            # –ê–¥—Ä–µ—Å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—è—Ç—ã–µ, –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            address = " ".join(context.args[:-1]).replace(",", ", ")
            try:
                limit = int(context.args[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if limit > 2000:
                    limit = 2000
                    await update.message.reply_text(f"‚ö†Ô∏è –õ–∏–º–∏—Ç —É–º–µ–Ω—å—à–µ–Ω –¥–æ {limit}")
            except ValueError:
                await update.message.reply_text("‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
            status_msg = await update.message.reply_text(
                f"‚ö° **–ü–ê–†–°–ò–ù–ì –ó–ê–ü–£–©–ï–ù**\n\n"
                f"üìç –ê–¥—Ä–µ—Å: `{address}`\n"
                f"üéØ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {limit}\n"
                f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...",
                parse_mode='Markdown'
            )
            
            # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
            start_time = time.time()
            result = await self._run_parser(address, limit)
            end_time = time.time()
            
            if result['success']:
                # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                await status_msg.edit_text(
                    f"‚úÖ **–ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù**\n\n"
                    f"üìç –ê–¥—Ä–µ—Å: `{address}`\n"
                    f"üéØ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {limit}\n"
                    f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ: **{result['count']}**\n"
                    f"üìä –° –ë–ñ–£: **{result['bju_count']} ({result['bju_percent']:.1f}%)**\n"
                    f"‚è±Ô∏è –í—Ä–µ–º—è: **{end_time - start_time:.1f} —Å–µ–∫**",
                    parse_mode='Markdown'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                if result.get('csv_file') and Path(result['csv_file']).exists():
                    with open(result['csv_file'], 'rb') as f:
                        await update.message.reply_document(
                            document=f,
                            filename=f"vkusvill_{int(time.time())}.csv",
                            caption=f"üìä {result['count']} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É"
                        )
            else:
                # –û—à–∏–±–∫–∞
                await status_msg.edit_text(
                    f"‚ùå **–û–®–ò–ë–ö–ê**\n\n"
                    f"üìç –ê–¥—Ä–µ—Å: `{address}`\n"
                    f"‚ö†Ô∏è {result['error']}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def deep_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ /deep."""
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if len(context.args) < 1:
                await update.message.reply_text(
                    "‚ùå –§–æ—Ä–º–∞—Ç: `/deep –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`\n\n"
                    "–ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ `/deep 1500`\n"
                    "‚Ä¢ `/deep 800`",
                    parse_mode='Markdown'
                )
                return
            
            try:
                limit = int(context.args[0])
                if limit > 1500:
                    limit = 1500
                    await update.message.reply_text(f"‚ö†Ô∏è –õ–∏–º–∏—Ç —É–º–µ–Ω—å—à–µ–Ω –¥–æ {limit}")
            except ValueError:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
            status_msg = await update.message.reply_text(
                f"üîç **–ì–õ–£–ë–û–ö–ò–ô –ü–ê–†–°–ò–ù–ì –ó–ê–ü–£–©–ï–ù**\n\n"
                f"üéØ –¢–æ–≤–∞—Ä–æ–≤: {limit}\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è: 15-40 –º–∏–Ω—É—Ç\n"
                f"üîÑ –ü–∞—Ä—Å–∏–º —Å–∞–π—Ç –∑–∞–Ω–æ–≤–æ...",
                parse_mode='Markdown'
            )
            
            # –ó–∞–ø—É—Å–∫ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
            start_time = time.time()
            result = await self._run_deep_parser(limit)
            end_time = time.time()
            
            if result['success']:
                # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                duration_min = (end_time - start_time) / 60
                await status_msg.edit_text(
                    f"‚úÖ **–ì–õ–£–ë–û–ö–ò–ô –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù**\n\n"
                    f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ: **{result['count']}**\n"
                    f"üìä –ü–æ–ª–Ω–æ–µ –ë–ñ–£: **{result['full_bju']} ({result['full_bju_percent']:.1f}%)**\n"
                    f"üìä –•–æ—Ä–æ—à–µ–µ –ë–ñ–£: **{result['good_bju']} ({result['good_bju_percent']:.1f}%)**\n"
                    f"‚è±Ô∏è –í—Ä–µ–º—è: **{duration_min:.1f} –º–∏–Ω**",
                    parse_mode='Markdown'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                if result.get('csv_file') and Path(result['csv_file']).exists():
                    with open(result['csv_file'], 'rb') as f:
                        await update.message.reply_document(
                            document=f,
                            filename=f"vkusvill_deep_{int(time.time())}.csv",
                            caption=f"üìä –ì–ª—É–±–æ–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥: {result['count']} —Ç–æ–≤–∞—Ä–æ–≤"
                        )
            else:
                # –û—à–∏–±–∫–∞
                await status_msg.edit_text(
                    f"‚ùå **–û–®–ò–ë–ö–ê –ì–õ–£–ë–û–ö–û–ì–û –ü–ê–†–°–ò–ù–ì–ê**\n\n"
                    f"‚ö†Ô∏è {result['error']}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤.",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def location_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏."""
        try:
            location = update.message.location
            lat = location.latitude
            lon = location.longitude
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            address_info = await self._get_address_from_coords(lat, lon)
            
            await update.message.reply_text(
                f"üìç **–ü–û–õ–£–ß–ï–ù–ê –ì–ï–û–ü–û–ó–ò–¶–ò–Ø**\n\n"
                f"üó∫Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: `{lat:.4f}, {lon:.4f}`\n"
                f"üìç –ê–¥—Ä–µ—Å: {address_info}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n"
                f"‚Ä¢ `/parse {lat:.4f},{lon:.4f} 500` - 500 —Ç–æ–≤–∞—Ä–æ–≤\n"
                f"‚Ä¢ `/parse {lat:.4f},{lon:.4f} 1000` - 1000 —Ç–æ–≤–∞—Ä–æ–≤\n"
                f"‚Ä¢ `/parse {lat:.4f},{lon:.4f} 1500` - 1500 —Ç–æ–≤–∞—Ä–æ–≤\n\n"
                f"–ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: `{lat:.4f},{lon:.4f}`",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏: {e}")
    
    async def _get_address_from_coords(self, lat: float, lon: float) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º."""
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            if 55.5 <= lat <= 56.0 and 37.3 <= lon <= 38.0:
                return "–ú–æ—Å–∫–≤–∞"
            elif 59.8 <= lat <= 60.1 and 30.0 <= lon <= 30.6:
                return "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
            elif 56.7 <= lat <= 57.0 and 60.4 <= lon <= 60.8:
                return "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"
            else:
                return f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {lat:.4f}, {lon:.4f}"
        except:
            return f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {lat:.4f}, {lon:.4f}"
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ /status."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            data_dir = Path("data")
            csv_files = list(data_dir.glob("*.csv")) if data_dir.exists() else []
            heavy_files = list(data_dir.glob("moscow_improved_*.csv")) if data_dir.exists() else []
            latest_heavy = sorted(heavy_files)[-1] if heavy_files else None
            
            status_text = f"""
üìä **–°–¢–ê–¢–£–°**

üóÉÔ∏è **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –§–∞–π–ª–æ–≤: {len(csv_files)}
‚Ä¢ –ë–∞–∑–∞: `{latest_heavy.name if latest_heavy else '–ù–µ—Ç'}`
‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {self._count_lines(latest_heavy) if latest_heavy else 0}

‚ö° **–ü–∞—Ä—Å–µ—Ä:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –ì–æ—Ç–æ–≤' if latest_heavy else '‚ùå –ù–µ—Ç –±–∞–∑—ã'}
‚Ä¢ –†–µ–∂–∏–º: –ë—ã—Å—Ç—Ä—ã–π (–ø–æ –∞–¥—Ä–µ—Å—É)

ü§ñ **–ë–æ—Ç:** v1.0
            """
            
            await update.message.reply_text(status_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def _count_lines(self, file_path) -> int:
        """–ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ."""
        if not file_path or not file_path.exists():
            return 0
        try:
            with open(file_path, 'r') as f:
                return sum(1 for _ in f) - 1  # -1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        except:
            return 0
    
    async def _run_parser(self, address: str, limit: int) -> dict:
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞."""
        try:
            cmd = [sys.executable, "address.py", address, str(limit)]
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=Path.cwd()
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                # –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω
                output = stdout.decode('utf-8')
                lines = output.split('\n')
                
                count = 0
                bju_count = 0
                csv_file = ""
                
                for line in lines:
                    if "–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:" in line:
                        count = int(line.split(':')[1].strip())
                    elif "–° –ë–ñ–£ –¥–∞–Ω–Ω—ã–º–∏:" in line:
                        bju_text = line.split(':')[1].strip()
                        bju_count = int(bju_text.split()[0])
                    elif "CSV:" in line:
                        csv_file = line.split(':', 1)[1].strip()
                
                bju_percent = (bju_count / count * 100) if count > 0 else 0
                
                return {
                    'success': True,
                    'count': count,
                    'bju_count': bju_count,
                    'bju_percent': bju_percent,
                    'csv_file': csv_file
                }
            else:
                error = stderr.decode('utf-8') or stdout.decode('utf-8')
                return {'success': False, 'error': error[:200]}
                
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    async def _run_deep_parser(self, limit: int) -> dict:
        """–ó–∞–ø—É—Å–∫ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ moscow_improved.py."""
        try:
            cmd = [sys.executable, "moscow_improved.py", str(limit)]
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=Path.cwd()
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0:
                # –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω
                output = stdout.decode('utf-8')
                lines = output.split('\n')
                
                count = 0
                full_bju = 0
                good_bju = 0
                csv_file = ""
                
                for line in lines:
                    if "–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:" in line:
                        count = int(line.split(':')[1].strip())
                    elif "–ü–æ–ª–Ω–æ–µ –ë–ñ–£ (4/4):" in line:
                        full_bju_text = line.split(':')[1].strip()
                        full_bju = int(full_bju_text.split()[0])
                    elif "–•–æ—Ä–æ—à–µ–µ –ë–ñ–£ (3/4):" in line:
                        good_bju_text = line.split(':')[1].strip()
                        good_bju = int(good_bju_text.split()[0])
                    elif "CSV:" in line or "–§–∞–π–ª—ã:" in line and ".csv" in line:
                        # –ò—â–µ–º –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
                        csv_match = re.search(r'(data/moscow_improved_\d+\.csv)', line)
                        if csv_match:
                            csv_file = csv_match.group(1)
                
                full_bju_percent = (full_bju / count * 100) if count > 0 else 0
                good_bju_percent = (good_bju / count * 100) if count > 0 else 0
                
                return {
                    'success': True,
                    'count': count,
                    'full_bju': full_bju,
                    'full_bju_percent': full_bju_percent,
                    'good_bju': good_bju,
                    'good_bju_percent': good_bju_percent,
                    'csv_file': csv_file
                }
            else:
                error = stderr.decode('utf-8') or stdout.decode('utf-8')
                return {'success': False, 'error': error[:200]}
                
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        print("ü§ñ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ Telegram –±–æ—Ç–∞...")
        print("üìç –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        self.app.run_polling()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN")
        print("üí° –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
        print("export TELEGRAM_BOT_TOKEN='your_token'")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.WARNING  # –ú–µ–Ω—å—à–µ –ª–æ–≥–æ–≤
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = VkusvillSimpleBot(token)
    
    try:
        bot.run()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
