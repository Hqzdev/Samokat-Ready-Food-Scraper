#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –í–∫—É—Å–í–∏–ª–ª –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
"""

import asyncio
import httpx
from selectolax.parser import HTMLParser
import json
import re


async def test_vkusvill_pagination():
    """–ò—Å—Å–ª–µ–¥—É–µ–º –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–∞ –í–∫—É—Å–í–∏–ª–ª."""
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
    }
    
    async with httpx.AsyncClient(timeout=30, headers=headers) as client:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã
        url = "https://vkusvill.ru/goods/gotovaya-eda/"
        print(f"üîç –ò—Å—Å–ª–µ–¥—É–µ–º: {url}")
        
        response = await client.get(url)
        print(f"üì• HTTP {response.status_code}, —Ä–∞–∑–º–µ—Ä: {len(response.text)}")
        
        if response.status_code == 200:
            parser = HTMLParser(response.text)
            
            # –ò—â–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            product_links = parser.css('a[href*="/goods/"][href$=".html"]')
            print(f"üîó –¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(product_links)}")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ
            show_more_buttons = parser.css('button, a, [class*="more"], [class*="load"], [class*="show"]')
            print(f"üîò –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: {len(show_more_buttons)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            for i, button in enumerate(show_more_buttons[:10]):  # –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                text = button.text().strip().lower()
                classes = button.attributes.get('class', '')
                onclick = button.attributes.get('onclick', '')
                data_attrs = {k: v for k, v in button.attributes.items() if k.startswith('data-')}
                
                if any(keyword in text for keyword in ['–ø–æ–∫–∞–∑–∞—Ç—å', '–µ—â–µ', '–±–æ–ª—å—à–µ', '–∑–∞–≥—Ä—É–∑–∏—Ç—å', 'more', 'load']):
                    print(f"   üéØ –ö–Ω–æ–ø–∫–∞ {i+1}: '{text}' | class='{classes}' | onclick='{onclick}' | data={data_attrs}")
            
            # –ò—â–µ–º JavaScript –∫–æ–¥ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            scripts = parser.css('script')
            print(f"üìú JavaScript –±–ª–æ–∫–æ–≤: {len(scripts)}")
            
            pagination_patterns = [
                r'load.*more',
                r'show.*more', 
                r'pagination',
                r'page.*next',
                r'ajax.*load',
                r'catalog.*load'
            ]
            
            for script in scripts:
                script_text = script.text()
                if script_text:
                    for pattern in pagination_patterns:
                        if re.search(pattern, script_text, re.I):
                            print(f"   üìú –ù–∞–π–¥–µ–Ω JS —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: {pattern}")
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞
                            lines = script_text.split('\n')
                            for line_num, line in enumerate(lines):
                                if re.search(pattern, line, re.I):
                                    start = max(0, line_num - 2)
                                    end = min(len(lines), line_num + 3)
                                    print(f"      –°—Ç—Ä–æ–∫–∏ {start}-{end}:")
                                    for i in range(start, end):
                                        marker = ">>> " if i == line_num else "    "
                                        print(f"      {marker}{lines[i].strip()}")
                                    break
                            break
            
            # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ HTML
            pagination_elements = parser.css('[class*="pag"], [id*="pag"], [data*="pag"]')
            print(f"üìÑ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {len(pagination_elements)}")
            
            for elem in pagination_elements[:5]:
                print(f"   üìÑ {elem.tag} class='{elem.attributes.get('class', '')}' id='{elem.attributes.get('id', '')}' text='{elem.text()[:50]}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ data-–∞—Ç—Ä–∏–±—É—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∑–∫–µ
            data_elements = parser.css('[data-url], [data-page], [data-offset], [data-limit], [data-category]')
            print(f"üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-–∞—Ç—Ä–∏–±—É—Ç–∞–º–∏: {len(data_elements)}")
            
            for elem in data_elements[:5]:
                data_attrs = {k: v for k, v in elem.attributes.items() if k.startswith('data-')}
                print(f"   üìä {elem.tag}: {data_attrs}")


if __name__ == "__main__":
    asyncio.run(test_vkusvill_pagination())
