#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ –°–∞–º–æ–∫–∞—Ç–∞
"""

import asyncio
import aiohttp
from playwright.async_api import async_playwright

async def test_samokat_access():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –°–∞–º–æ–∫–∞—Ç–∞"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –°–∞–º–æ–∫–∞—Ç–∞...")
    
    # –¢–µ—Å—Ç 1: HTTP –∑–∞–ø—Ä–æ—Å
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://samokat.ru", timeout=30) as response:
                print(f"‚úÖ HTTP —Å—Ç–∞—Ç—É—Å: {response.status}")
                if response.status == 200:
                    content = await response.text()
                    print(f"üìÑ –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    if "–µ–¥–∞" in content.lower() or "food" in content.lower():
                        print("üçΩÔ∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –µ–¥—ã –Ω–∞–π–¥–µ–Ω—ã")
                    else:
                        print("‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status}")
    except Exception as e:
        print(f"‚ùå HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {e}")
    
    # –¢–µ—Å—Ç 2: Playwright —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º
    try:
        async with async_playwright() as p:
            browser = await p.webkit.launch(headless=True)
            context = await browser.new_context()
            page = await context.new_page()
            
            print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç...")
            await page.goto("https://samokat.ru", timeout=30000)
            
            # –ñ–¥–µ–º —Ç–æ–ª—å–∫–æ DOM
            await page.wait_for_load_state("domcontentloaded", timeout=30000)
            
            print("üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...")
            await page.screenshot(path="data/out/samokat_quick.png")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = await page.title()
            print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
            
            # –ò—â–µ–º –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏
            links = await page.query_selector_all("a")
            print(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}")
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
            text_links = []
            for link in links[:10]:
                try:
                    text = await link.text_content()
                    href = await link.get_attribute("href")
                    if text and href:
                        text_links.append((text.strip(), href))
                except:
                    continue
            
            print(f"üìù –°—Å—ã–ª–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º: {len(text_links)}")
            for text, href in text_links[:5]:
                print(f"  ‚Ä¢ {text} -> {href}")
            
            await browser.close()
            
    except Exception as e:
        print(f"‚ùå Playwright —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")

if __name__ == "__main__":
    asyncio.run(test_samokat_access())

