#!/usr/bin/env python3
"""–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã."""

import asyncio
import sys
import subprocess
from pathlib import Path


def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–ø—Ü–∏–π."""
    print("üöÄ –ü–ê–†–°–ï–† –ì–û–¢–û–í–û–ô –ï–î–´")
    print("=" * 40)
    print("1. üì¶ –ü–∞—Ä—Å–∏—Ç—å –í–∫—É—Å–í–∏–ª–ª (—Ä–∞–±–æ—Ç–∞–µ—Ç)")
    print("2. üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –°–∞–º–æ–∫–∞—Ç–∞")
    print("3. üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –õ–∞–≤–∫–∏")
    print("4. üìä –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("5. üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    print("0. ‚ùå –í—ã—Ö–æ–¥")
    print("-" * 40)


async def run_vkusvill():
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –í–∫—É—Å–í–∏–ª–ª."""
    print("üì¶ –ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê –í–ö–£–°–í–ò–õ–õ")
    print("-" * 30)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π CLI
    import subprocess
    
    cmd = [
        "python3", "-m", "app", "scrape",
        "--shop", "vkusvill",
        "--city", "–ú–æ—Å–∫–≤–∞", 
        "--address", "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1",
        "--out", "data/vkusvill_latest.csv",
        "--format", "csv", "json",
        "--log-level", "INFO"
    ]
    
    print("üîÑ –ö–æ–º–∞–Ω–¥–∞:", " ".join(cmd))
    print("‚è≥ –ó–∞–ø—É—Å–∫...")
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª: data/vkusvill_latest.csv")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
            print(result.stderr)
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ–≤—ã—Å–∏–ª 5 –º–∏–Ω—É—Ç - –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")


def show_existing_data():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ."""
    print("üìä –ì–û–¢–û–í–´–ï –î–ê–ù–ù–´–ï")
    print("-" * 30)
    
    data_dir = Path("data")
    if not data_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    csv_files = list(data_dir.glob("*.csv"))
    
    if not csv_files:
        print("‚ùå CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print("üìÑ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    for i, file in enumerate(csv_files, 1):
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
            with open(file, 'r') as f:
                line_count = sum(1 for line in f) - 1  # -1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            
            file_size = file.stat().st_size / 1024  # KB
            print(f"{i}. {file.name}")
            print(f"   üìä –¢–æ–≤–∞—Ä–æ–≤: {line_count}")
            print(f"   üíæ –†–∞–∑–º–µ—Ä: {file_size:.1f} KB")
            print()
            
        except Exception as e:
            print(f"{i}. {file.name} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ª—É—á—à–∏–π —Ñ–∞–π–ª
    best_files = [f for f in csv_files if "FINAL" in f.name or "real" in f.name]
    if best_files:
        print(f"üí° –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –§–ê–ô–õ: {best_files[0].name}")


def cleanup_temp_files():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print("üßπ –û–ß–ò–°–¢–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –§–ê–ô–õ–û–í")
    print("-" * 30)
    
    temp_patterns = [
        "debug_*.py",
        "test_*.py", 
        "quick_*.py",
        "*_session.json",
        "data/demo_*",
        "data/test_*",
        "data/quick_*"
    ]
    
    removed_count = 0
    
    for pattern in temp_patterns:
        try:
            files = list(Path(".").glob(pattern))
            for file in files:
                try:
                    file.unlink()
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {file}")
                    removed_count += 1
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file}: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {pattern}: {e}")
    
    print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {removed_count}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    while True:
        print("\n" + "="*50)
        show_menu()
        
        try:
            choice = input("üëâ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-5): ").strip()
            
            if choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            elif choice == "1":
                await run_vkusvill()
                
            elif choice == "2":
                print("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –°–∞–º–æ–∫–∞—Ç–∞...")
                subprocess.run(["python3", "debug_samokat.py"])
                
            elif choice == "3":
                print("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –õ–∞–≤–∫–∏...")
                subprocess.run(["python3", "debug_lavka_real.py"])
                
            elif choice == "4":
                show_existing_data()
                
            elif choice == "5":
                cleanup_temp_files()
                
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    print("üéØ –ü–ê–†–°–ï–† –ì–û–¢–û–í–û–ô –ï–î–´")
    print("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        sys.exit(0)
