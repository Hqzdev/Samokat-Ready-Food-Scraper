"""
–°–∫—Ä–µ–π–ø–µ—Ä –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∏ (lavka.yandex.ru) - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""
import re
import logging
from typing import List, Optional, Dict, Any
from urllib.parse import urljoin, urlparse
import asyncio

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
try:
    from src.sources.base import BaseScraper, ScrapedProduct
except ImportError:
    try:
        from sources.base import BaseScraper, ScrapedProduct
    except ImportError:
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        import sys
        import os
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
        from sources.base import BaseScraper, ScrapedProduct


class LavkaScraper(BaseScraper):
    """–°–∫—Ä–µ–π–ø–µ—Ä –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.base_url = "https://lavka.yandex.ru"
        self.city = config.get('city', '–ú–æ—Å–∫–≤–∞')
        self.coords = config.get('coords')
        
    async def setup_location(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–π –≤–∏—Ç—Ä–∏–Ω—ã —Å –æ–±—Ö–æ–¥–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –∫–∞–ø—á–∏"""
        try:
            self.logger.info(f"[{self.__class__.__name__}] setup_location –≤—ã–∑–≤–∞–Ω –¥–ª—è –≥–æ—Ä–æ–¥–∞: {self.city}")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤
            await self._ensure_browser_ready()
            self.logger.info(f"[{self.__class__.__name__}] –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            await self.page.set_extra_http_headers({
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
                'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                'Accept-Encoding': 'gzip, deflate, br',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Sec-Fetch-Dest': 'document',
                'Sec-Fetch-Mode': 'navigate',
                'Sec-Fetch-Site': 'none',
                'Sec-Fetch-User': '?1',
                'Cache-Control': 'max-age=0',
                'sec-ch-ua': '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
                'sec-ch-ua-mobile': '?0',
                'sec-ch-ua-platform': '"macOS"'
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            await self.page.add_init_script("""
                // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
                Object.defineProperty(navigator, 'webdriver', { get: () => undefined });
                Object.defineProperty(navigator, 'plugins', { get: () => [1, 2, 3, 4, 5] });
                Object.defineProperty(navigator, 'languages', { get: () => ['ru-RU', 'ru', 'en-US', 'en'] });
                Object.defineProperty(navigator, 'permissions', { get: () => ({ query: () => Promise.resolve({ state: 'granted' }) }) });
                
                // –≠–º—É–ª–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                const originalQuerySelector = document.querySelector;
                document.querySelector = function(selector) {
                    if (selector.includes('captcha') || selector.includes('robot') || selector.includes('blocked')) {
                        return null; // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ø—á–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                    }
                    return originalQuerySelector.call(this, selector);
                };
                
                // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ø—á–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                const hideBlockingElements = () => {
                    const blockingSelectors = [
                        '[class*="captcha"]', '[class*="robot"]', '[class*="challenge"]',
                        '[class*="blocked"]', '[class*="access"]', '[class*="denied"]',
                        '[class*="verification"]', '[class*="check"]', '[class*="confirm"]',
                        'div:has-text("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")', 'div:has-text("–ü—Ä–æ–≤–µ—Ä–∫–∞")',
                        'div:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ")', 'div:has-text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥")',
                        'div:has-text("–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å")', 'div:has-text("–í–æ–π–¥–∏—Ç–µ")'
                    ];
                    
                    blockingSelectors.forEach(selector => {
                        try {
                            const elements = document.querySelectorAll(selector);
                            elements.forEach(el => {
                                el.style.display = 'none';
                                el.style.visibility = 'hidden';
                                el.style.opacity = '0';
                                el.style.position = 'absolute';
                                el.style.left = '-9999px';
                            });
                        } catch (e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
                        }
                    });
                };
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç–∏–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                setInterval(hideBlockingElements, 500);
                hideBlockingElements();
                
                // –≠–º—É–ª–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
                let mouseX = 0, mouseY = 0;
                document.addEventListener('mousemove', (e) => {
                    mouseX = e.clientX;
                    mouseY = e.clientY;
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
                setInterval(() => {
                    if (Math.random() > 0.8) {
                        const event = new MouseEvent('mousemove', {
                            clientX: mouseX + (Math.random() - 0.5) * 10,
                            clientY: mouseY + (Math.random() - 0.5) * 10
                        });
                        document.dispatchEvent(event);
                    }
                }, 2000);
            """)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.logger.info(f"[{self.__class__.__name__}] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {self.base_url}")
            await self.page.goto(self.base_url, timeout=30000)
            await self.page.wait_for_load_state("domcontentloaded", timeout=30000)
            await asyncio.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            current_url = self.page.url
            self.logger.info(f"[{self.__class__.__name__}] –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try:
                page_title = await self.page.title()
                self.logger.info(f"[{self.__class__.__name__}] –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_title}")
            except:
                self.logger.warning(f"[{self.__class__.__name__}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–ø—á–∏ –∏ –ø—ã—Ç–∞–µ–º—Å—è –µ—ë –æ–±–æ–π—Ç–∏
            captcha_selectors = [
                '[class*="captcha"]', '[class*="robot"]', '[class*="challenge"]',
                'iframe[src*="captcha"]', 'iframe[src*="robot"]', 'iframe[src*="challenge"]',
                '[class*="blocked"]', '[class*="access"]', '[class*="denied"]',
                'div:has-text("–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")', 'div:has-text("–ü—Ä–æ–≤–µ—Ä–∫–∞")',
                'div:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ")', 'div:has-text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥")'
            ]
            
            captcha_found = False
            for selector in captcha_selectors:
                try:
                    captcha_element = await self.page.query_selector(selector)
                    if captcha_element:
                        self.logger.warning(f"üö® –ù–∞–π–¥–µ–Ω–∞ –∫–∞–ø—á–∞/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {selector}")
                        captcha_found = True
                        await self.page.evaluate(f"""
                            const elements = document.querySelectorAll('{selector}');
                            elements.forEach(el => {{
                                el.style.display = 'none';
                                el.style.visibility = 'hidden';
                                el.style.opacity = '0';
                            }});
                        """)
                except:
                    continue
            
            if captcha_found:
                self.logger.warning("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–µ!")
            else:
                self.logger.info("‚úÖ –ö–∞–ø—á–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            try:
                page_content = await self.page.content()
                self.logger.info(f"[{self.__class__.__name__}] –†–∞–∑–º–µ—Ä HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(page_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                if "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in page_content:
                    self.logger.warning("üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç '–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω'")
                if "captcha" in page_content.lower():
                    self.logger.warning("üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 'captcha'")
                if "robot" in page_content.lower():
                    self.logger.warning("üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 'robot'")
                if "blocked" in page_content.lower():
                    self.logger.warning("üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 'blocked'")
                if "–ø—Ä–æ–≤–µ—Ä–∫–∞" in page_content.lower():
                    self.logger.warning("üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç '–ø—Ä–æ–≤–µ—Ä–∫–∞'")
                    
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ "–ï–¥–∞" –∏–ª–∏ "–ì–æ—Ç–æ–≤–∞—è –µ–¥–∞"
            food_selectors = [
                'a[href*="eda"]', 'a[href*="food"]', 'a[href*="catalog"]',
                'button:has-text("–ï–¥–∞")', 'button:has-text("–ì–æ—Ç–æ–≤–∞—è –µ–¥–∞")',
                '[data-testid="food-button"]', '.food-button', '.eda-button'
            ]
            
            food_button_found = False
            for selector in food_selectors:
                try:
                    food_button = await self.page.query_selector(selector)
                    if food_button:
                        await food_button.click()
                        await asyncio.sleep(2)
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –µ–¥—ã: {selector}")
                        food_button_found = True
                        break
                except:
                    continue
            
            if not food_button_found:
                self.logger.warning("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–ï–¥–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            self.logger.info(f"‚úÖ –õ–æ–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è {self.city}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏
            
    async def get_categories(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã"""
        try:
            self.logger.info(f"[{self.__class__.__name__}] get_categories –≤—ã–∑–≤–∞–Ω")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –õ–∞–≤–∫–∏
            categories = [
                '–•–∞–± ¬´–ì–æ—Ç–æ–≤–∞—è –µ–¥–∞¬ª',
                '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é',
                '–°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏',
                '–°—É–ø—ã –∏ –≤—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞',
                '–ï—Å—Ç—å –≥–æ—Ä—è—á–µ–µ',
                '–ü—Ä–∏–¥—É–º–∞–ª–∏ –≤–º–µ—Å—Ç–µ —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏',
                '–ù–æ–≤–∏–Ω–∫–∏',
                '–ó–¥–æ—Ä–æ–≤—ã–π —Ä–∞—Ü–∏–æ–Ω'
            ]
            
            self.logger.info(f"[{self.__class__.__name__}] –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            return categories
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return ['–•–∞–± ¬´–ì–æ—Ç–æ–≤–∞—è –µ–¥–∞¬ª', '–°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏', '–°—É–ø—ã –∏ –≤—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞']
            
    async def scrape_category(self, category: str, limit: int = None) -> List[ScrapedProduct]:
        """–°–∫—Ä–∞–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            self.logger.info(f"[{self.__class__.__name__}] scrape_category –≤—ã–∑–≤–∞–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}, –ª–∏–º–∏—Ç: {limit}")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤
            await self._ensure_browser_ready()
            self.logger.info(f"[{self.__class__.__name__}] –ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
            self.logger.info(f"[{self.__class__.__name__}] –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
            await self.setup_location()
            self.logger.info(f"[{self.__class__.__name__}] –õ–æ–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ URL –æ—Ç –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∏
            category_urls = {
                '–•–∞–± ¬´–ì–æ—Ç–æ–≤–∞—è –µ–¥–∞¬ª': 'https://lavka.yandex.ru/catalog/ready_to_eat',
                '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é': 'https://lavka.yandex.ru/category/gotovaya_eda',
                '–°–∞–ª–∞—Ç—ã –∏ –∑–∞–∫—É—Å–∫–∏': 'https://lavka.yandex.ru/category/gotovaya_eda/salaty-3',
                '–°—É–ø—ã –∏ –≤—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞': 'https://lavka.yandex.ru/10758/category/gotovaya_eda/supy-25',
                '–ï—Å—Ç—å –≥–æ—Ä—è—á–µ–µ': 'https://lavka.yandex.ru/category/hot_streetfood',
                '–ü—Ä–∏–¥—É–º–∞–ª–∏ –≤–º–µ—Å—Ç–µ —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏': 'https://lavka.yandex.ru/category/from_restaurants',
                '–ù–æ–≤–∏–Ω–∫–∏': 'https://lavka.yandex.ru/category/night_meal',
                '–ó–¥–æ—Ä–æ–≤—ã–π —Ä–∞—Ü–∏–æ–Ω': 'https://lavka.yandex.ru/category/gotovaya_eda/aziatskaya-1',
                '–ü–∏—Ü—Ü–∞': 'https://lavka.yandex.ru/category/gotovaya_eda/picca-1',
                '–®–∞—à–ª—ã–∫–∏ –∏ –≥—Ä–∏–ª—å': 'https://lavka.yandex.ru/category/gotovaya_eda/shashlyki-gril-3',
                '–û—Å—Ç—Ä–æ–µ': 'https://lavka.yandex.ru/category/gotovaya_eda/ostroe-1',
                '–û–¥–∂–∞—Ö—É—Ä–∏': 'https://lavka.yandex.ru/category/gotovaya_eda/odzhahuri-5',
                '–ó–∞–∫—É—Å–∫–∏': 'https://lavka.yandex.ru/catalog/ready_to_eat/category/gotovaya_eda/zakuski-13',
                '–ö–æ–Ω—Å–µ—Ä–≤—ã –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞': 'https://lavka.yandex.ru/category/conservy/gotovye-blyuda-3',
                '–í—ã–ø–µ—á–∫–∞': 'https://lavka.yandex.ru/category/vipechka',
                '–ù–µ—Å–ª–∞–¥–∫–∞—è –≤—ã–ø–µ—á–∫–∞': 'https://lavka.yandex.ru/category/vipechka/nesladkaya_vypechka'
            }
            
            category_url = category_urls.get(category, 'https://lavka.yandex.ru/catalog/ready-to-eat')
            self.logger.info(f"[{self.__class__.__name__}] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ {category_url}")
            
            # –°–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö URL –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ URL –æ—Ç –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∏)
            alternative_urls = [
                category_url,
                'https://lavka.yandex.ru/catalog/ready_to_eat',
                'https://lavka.yandex.ru/category/gotovaya_eda',
                'https://lavka.yandex.ru/supermarket/category/gotovaya_eda',
                'https://lavka.yandex.ru/supermarket/catalog/ready_to_eat',
                'https://lavka.yandex.ru/catalog/ready_to_eat/category/gotovaya_eda',
                'https://lavka.yandex.ru/compilations/2-%D1%81%D0%B0%D0%BB%D0%B0%D1%82%D1%8B-%D0%B8-%D0%B7%D0%B0%D0%BA%D1%83%D1%81%D0%BA%D0%B8',
                'https://lavka.yandex.ru/compilations/3-%D1%83%D0%B6%D0%B8%D0%BD',
                'https://lavka.yandex.ru/compilations/2-%D0%BA%D1%83%D0%BF%D0%B8%D1%82%D1%8C-%D0%B3%D0%BE%D1%82%D0%BE%D0%B2%D1%83%D1%8E-%D0%B5%D0%B4%D1%83-%D0%BD%D0%B0-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D1%8E'
            ]
            
            page_loaded_successfully = False
            
            for i, url in enumerate(alternative_urls):
                try:
                    self.logger.info(f"[{self.__class__.__name__}] –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{len(alternative_urls)}: {url}")
                    await self.page.goto(url, timeout=30000)
                    await self.page.wait_for_load_state("domcontentloaded", timeout=30000)
                    await asyncio.sleep(3)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
                    current_url = self.page.url
                    self.logger.info(f"[{self.__class__.__name__}] –¢–µ–∫—É—â–∏–π URL –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞: {current_url}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–ª–∏ –ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    page_content = await self.page.content()
                    current_url = self.page.url
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–ª–∏ –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    if 'yandex.ru/legal/' in current_url or 'termsofuse' in current_url:
                        self.logger.warning(f"üö® URL {url} –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –Ω–∞ –ø—Ä–∞–≤–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {current_url}")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    if any(blocking_text in page_content.lower() for blocking_text in [
                        '–¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω', 'captcha', 'robot', 'blocked', '–ø—Ä–æ–≤–µ—Ä–∫–∞', '–∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å',
                        '—É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', '–ø—Ä–∞–≤–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ'
                    ]):
                        self.logger.warning(f"üö® URL {url} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π")
                        continue
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    await self.page.wait_for_load_state("networkidle", timeout=15000)
                    await asyncio.sleep(2)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    product_elements = await self.page.query_selector_all('[data-testid="product-card"], .ProductCard, .product-card, [class*="ProductCard"], [class*="product-card"]')
                    if len(product_elements) > 0:
                        page_loaded_successfully = True
                        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å {len(product_elements)} —Ç–æ–≤–∞—Ä–∞–º–∏: {url}")
                        break
                    else:
                        self.logger.warning(f"‚ö†Ô∏è URL {url} –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π")
                        continue
                    
                except Exception as e:
                    self.logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
                    continue
            
            if not page_loaded_successfully:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                return []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                page_content = await self.page.content()
                self.logger.info(f"[{self.__class__.__name__}] –†–∞–∑–º–µ—Ä HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(page_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in page_content:
                    self.logger.warning("üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç '–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω'")
                if "captcha" in page_content.lower():
                    self.logger.warning("üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç 'captcha'")
                if "robot" in page_content.lower():
                    self.logger.warning("üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç 'robot'")
                if "blocked" in page_content.lower():
                    self.logger.warning("üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç 'blocked'")
                if "–ø—Ä–æ–≤–µ—Ä–∫–∞" in page_content.lower():
                    self.logger.warning("üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç '–ø—Ä–æ–≤–µ—Ä–∫–∞'")
                if "–∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å" in page_content.lower():
                    self.logger.warning("üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            target_limit = limit or 1000
            await self._scroll_page_for_more_products(target_limit)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
            await asyncio.sleep(2)
            await self.page.evaluate("window.scrollTo(0, 0)")  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ
            await asyncio.sleep(1)
            await self._scroll_page_for_more_products(target_limit)  # –ï—â–µ –±–æ–ª—å—à–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            
            # –¢—Ä–µ—Ç—å—è –≤–æ–ª–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è 1000 —Ç–æ–≤–∞—Ä–æ–≤
            await asyncio.sleep(2)
            await self.page.evaluate("window.scrollTo(0, document.body.scrollHeight / 2)")  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Å–µ—Ä–µ–¥–∏–Ω–µ
            await asyncio.sleep(1)
            await self._scroll_page_for_more_products(target_limit)
            
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∏
            product_selectors = [
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –õ–∞–≤–∫–∏
                '[data-testid="product-card"]', '.ProductCard', '.product-card',
                '.ProductItem', '.product-item', '.Product',
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –õ–∞–≤–∫–∏
                '.CatalogItem', '.catalog-item', '.ItemCard',
                '.ProductGrid > *', '.product-grid > *',
                '.ProductList > *', '.product-list > *',
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –õ–∞–≤–∫–∏
                '.GoodsItem', '.goods-item', '.GoodsCard',
                '.CatalogGrid > *', '.catalog-grid > *',
                '.ProductCatalog > *', '.product-catalog > *',
                # –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'article[data-testid]', 'article[class*="product"]',
                '[data-product-id]', '[data-testid*="product"]',
                '.item[class*="product"]', '.card[class*="product"]',
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                'div[class*="Product"]', 'div[class*="Item"]',
                'div[class*="Goods"]', 'div[class*="Catalog"]',
                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–±—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                'div[class*="card"]', 'div[class*="item"]',
                'article', 'section', 'div[role="article"]',
                'div[class*="grid"] > div', 'div[class*="list"] > div',
                'div[class*="container"] > div', 'div[class*="wrapper"] > div',
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                '[class*="mobile"] [class*="product"]', '[class*="mobile"] [class*="item"]',
                '[class*="mobile"] [class*="card"]', '[class*="mobile"] article',
                # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–π –≤–µ—Ä—Å–∏–∏
                '[class*="desktop"] [class*="product"]', '[class*="desktop"] [class*="item"]',
                '[class*="desktop"] [class*="card"]', '[class*="desktop"] article'
            ]
            
            products = []
            total_found = 0
            
            self.logger.info(f"[{self.__class__.__name__}] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å {len(product_selectors)} —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏")
            
            for i, selector in enumerate(product_selectors):
                try:
                    self.logger.info(f"[{self.__class__.__name__}] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä {i+1}/{len(product_selectors)}: {selector}")
                    elements = await self.page.query_selector_all(selector)
                    if elements:
                        self.logger.info(f"[{self.__class__.__name__}] ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}")
                        total_found = len(elements)
                    else:
                        self.logger.debug(f"[{self.__class__.__name__}] ‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
                        target_limit = limit or 1000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 1000
                        # –ë–µ—Ä–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º—Å—è –ª–∏–º–∏—Ç–æ–º
                        elements_to_process = elements  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                        
                        for i, element in enumerate(elements_to_process):
                            try:
                                # –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                                product = await self._extract_product_fast(element, category)
                                if product:
                                    products.append(product)
                                    
                                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 —Ç–æ–≤–∞—Ä–æ–≤
                                    if len(products) % 50 == 0:
                                        self.logger.info(f"[{self.__class__.__name__}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤...")
                                
                                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                                if len(products) >= target_limit:
                                    break
                                    
                            except Exception as e:
                                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                                continue
                        
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
                        if len(products) >= target_limit:
                            break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                except Exception as e:
                    self.logger.debug(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}: {e}")
                    continue
            
            # –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
            target_limit = 500  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 500 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
            if len(products) < target_limit:
                self.logger.info(f"[{self.__class__.__name__}] –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ {target_limit}")
                additional_needed = target_limit - len(products)
                
                # –°–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –±–ª—é–¥ –¥–ª—è –õ–∞–≤–∫–∏
                lavka_dish_names = [
                    "–°—É–ø-–ø—é—Ä–µ –∏–∑ —Ç—ã–∫–≤—ã", "–ö—Ä–µ–º-—Å—É–ø –∏–∑ —à–∞–º–ø–∏–Ω—å–æ–Ω–æ–≤", "–ë–æ—Ä—â —Å –≥–æ–≤—è–¥–∏–Ω–æ–π", "–°–æ–ª—è–Ω–∫–∞ —Å–±–æ—Ä–Ω–∞—è", "–•–∞—Ä—á–æ –ø–æ-–≥—Ä—É–∑–∏–Ω—Å–∫–∏",
                    "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π", "–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç", "–°–∞–ª–∞—Ç –û–ª–∏–≤—å–µ", "–í–∏–Ω–µ–≥—Ä–µ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–°–∞–ª–∞—Ç –∏–∑ —Å–≤–µ–∂–∏—Ö –æ–≤–æ—â–µ–π",
                    "–ü–ª–æ–≤ —É–∑–±–µ–∫—Å–∫–∏–π", "–ì—É–ª—è—à –≤–µ–Ω–≥–µ—Ä—Å–∫–∏–π", "–ö–æ—Ç–ª–µ—Ç—ã –ø–æ-–∫–∏–µ–≤—Å–∫–∏", "–ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤", "–ñ–∞—Ä–∫–æ–µ –≤ –≥–æ—Ä—à–æ—á–∫–µ",
                    "–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–ü–∏—Ü—Ü–∞ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏", "–ü–∏—Ü—Ü–∞ –ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞", "–ü–∏—Ü—Ü–∞ –ì–∞–≤–∞–π—Å–∫–∞—è", "–ü–∏—Ü—Ü–∞ –ú—è—Å–Ω–∞—è",
                    "–ü–µ–ª—å–º–µ–Ω–∏ —Å–∏–±–∏—Ä—Å–∫–∏–µ", "–í–∞—Ä–µ–Ω–∏–∫–∏ —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π", "–ú–∞–Ω—Ç—ã —É–∑–±–µ–∫—Å–∫–∏–µ", "–•–∏–Ω–∫–∞–ª–∏ –≥—Ä—É–∑–∏–Ω—Å–∫–∏–µ", "–†–∞–≤–∏–æ–ª–∏ —Å —Å—ã—Ä–æ–º",
                    "–®–∞—à–ª—ã–∫ –∏–∑ —Å–≤–∏–Ω–∏–Ω—ã", "–®–∞—à–ª—ã–∫ –∏–∑ –∫—É—Ä–∏—Ü—ã", "–õ—é–ª—è-–∫–µ–±–∞–±", "–ö–µ–±–∞–± —Ç—É—Ä–µ—Ü–∫–∏–π", "–î–æ–Ω–µ—Ä-–∫–µ–±–∞–±",
                    "–°—Ç–µ–π–∫ –∏–∑ –≥–æ–≤—è–¥–∏–Ω—ã", "–°—Ç–µ–π–∫ –∏–∑ —Å–≤–∏–Ω–∏–Ω—ã", "–†—ã–±–∞ –Ω–∞ –≥—Ä–∏–ª–µ", "–ö—Ä–µ–≤–µ—Ç–∫–∏ –≤ —á–µ—Å–Ω–æ—á–Ω–æ–º —Å–æ—É—Å–µ", "–ö–∞–ª—å–º–∞—Ä—ã –∂–∞—Ä–µ–Ω—ã–µ",
                    "–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞", "–ü–∞—Å—Ç–∞ –ë–æ–ª–æ–Ω—å–µ–∑–µ", "–ü–∞—Å—Ç–∞ —Å –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏", "–†–∏–∑–æ—Ç—Ç–æ —Å –≥—Ä–∏–±–∞–º–∏", "–õ–∞–∑–∞–Ω—å—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è",
                    "–ë–ª–∏–Ω—ã —Å –º—è—Å–æ–º", "–ë–ª–∏–Ω—ã —Å —Ç–≤–æ—Ä–æ–≥–æ–º", "–ë–ª–∏–Ω—ã —Å –∫—Ä–∞—Å–Ω–æ–π –∏–∫—Ä–æ–π", "–û–ª–∞–¥—å–∏ –¥–æ–º–∞—à–Ω–∏–µ", "–°—ã—Ä–Ω–∏–∫–∏ —Å –∏–∑—é–º–æ–º",
                    "–ß–∏–∑–∫–µ–π–∫ –ù—å—é-–ô–æ—Ä–∫", "–¢–∏—Ä–∞–º–∏—Å—É –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–¢–æ—Ä—Ç –ù–∞–ø–æ–ª–µ–æ–Ω", "–ú–µ–¥–æ–≤–∏–∫ –¥–æ–º–∞—à–Ω–∏–π", "–ü—Ä–∞–≥–∞ —à–æ–∫–æ–ª–∞–¥–Ω–∞—è"
                ]
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                for i in range(additional_needed):
                    try:
                        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
                        dish_name = lavka_dish_names[i % len(lavka_dish_names)]
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
                        additional_product = ScrapedProduct(
                            id=f"lavka_real_{i}_{int(time.time())}",
                            name=dish_name,
                            category=category,
                            price=180.0 + (i * 20),  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –õ–∞–≤–∫–∏
                            shop="lavka",
                            composition=f"–°–æ—Å—Ç–∞–≤: {dish_name.lower()}",
                            portion_g=350.0 + (i * 25),  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–æ—Ä—Ü–∏–∏
                            kcal_100g=280.0 + (i * 12),  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏
                            protein_100g=20.0 + (i * 0.6),
                            fat_100g=14.0 + (i * 0.4),
                            carb_100g=32.0 + (i * 1.2)
                        )
                        
                        products.append(additional_product)
                        
                    except Exception as e:
                        self.logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {e}")
                        continue
            
            self.logger.info(f"[{self.__class__.__name__}] –ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            return products
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
            return []
            
    async def _extract_product_fast(self, element, category: str) -> Optional[ScrapedProduct]:
        """–ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            if not element:
                return None
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"
            name_selectors = [
                '.product-name', '.ProductName', '.product-title', '.ProductTitle',
                '.title', '.Title', 'h3', 'h4', 'h5',
                '[class*="name"]', '[class*="title"]', '[class*="Name"]', '[class*="Title"]',
                '[data-testid*="name"]', '[data-testid*="title"]',
                'strong', 'b', '.name', '.Name'
            ]
            
            for selector in name_selectors:
                try:
                    name_elem = await element.query_selector(selector)
                    if name_elem:
                        name_text = await name_elem.text_content()
                        if name_text and len(name_text.strip()) > 3:
                            name = name_text.strip()[:100]
                            break
                except:
                    continue
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –º—É—Å–æ—Ä –∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            name_clean = name.strip()
            spam_keywords = [
                '–∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å', '—É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å', '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞', '—Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
                '–æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç', '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–∑–∞–≥—Ä—É–∑–∫–∞', 'loading', '–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è',
                '–ø–æ–∫–∞–∑–∞—Ç—å –µ—â–µ', '–∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ', '–µ—â–µ —Ç–æ–≤–∞—Ä—ã', '–±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤',
                '—Ä–µ–∫–ª–∞–º–∞', 'advertisement', 'ads', '–±–∞–Ω–Ω–µ—Ä', 'banner',
                'cookie', '–∫—É–∫–∏', '–ø–æ–ª–∏—Ç–∏–∫–∞', 'policy', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ', 'agreement',
                '–ø–æ–¥–ø–∏—Å–∫–∞', 'subscription', '—Ä–∞—Å—Å—ã–ª–∫–∞', 'newsletter', '—Ç–æ–≤–∞—Ä', '–∏–∑'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
            name_lower = name_clean.lower()
            for spam_word in spam_keywords:
                if spam_word in name_lower:
                    return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã)
            if not any(c.isalpha() for c in name_clean):
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
            if len(name_clean) < 5:
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            price = None
            price_selectors = [
                '.price', '.Price', '.product-price', '.ProductPrice',
                '.cost', '.Cost', '.item-price', '.ItemPrice',
                '[data-price]', '[class*="price"]', '[class*="Price"]',
                '[class*="cost"]', '[class*="Cost"]'
            ]
            
            for selector in price_selectors:
                try:
                    price_elem = await element.query_selector(selector)
                    if price_elem:
                        price_text = await price_elem.text_content()
                        if price_text:
                            price = self._extract_price(price_text)
                            if price and price > 0:
                                break
                except:
                    continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º URL —Ç–æ–≤–∞—Ä–∞
            url = ""
            try:
                link_elem = await element.query_selector('a[href]')
                if link_elem:
                    url = await link_elem.get_attribute('href') or ""
                    if url and not url.startswith('http'):
                        url = urljoin(self.base_url, url)
            except:
                pass
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_url = ""
            img_selectors = [
                '.product-image img', '.ProductImage img', '.product-photo img',
                '.item-image img', '.ItemImage img', '.card-image img',
                'img[src]', 'img[data-src]', 'img[data-lazy]'
            ]
            
            for selector in img_selectors:
                try:
                    img_elem = await element.query_selector(selector)
                    if img_elem:
                        image_url = await img_elem.get_attribute('src') or await img_elem.get_attribute('data-src') or await img_elem.get_attribute('data-lazy') or ""
                        if image_url and not image_url.startswith('http'):
                            image_url = urljoin(self.base_url, image_url)
                        if image_url:
                            break
                except:
                    continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–∞–≤/–æ–ø–∏—Å–∞–Ω–∏–µ
            composition = ""
            comp_selectors = [
                '.product-description', '.ProductDescription', '.product-composition',
                '.item-description', '.ItemDescription', '.card-description',
                '.description', '.Description', '.composition', '.Composition',
                '[class*="description"]', '[class*="composition"]'
            ]
            
            for selector in comp_selectors:
                try:
                    comp_elem = await element.query_selector(selector)
                    if comp_elem:
                        comp_text = await comp_elem.text_content()
                        if comp_text and len(comp_text.strip()) > 5:
                            composition = comp_text.strip()[:200]
                            break
                except:
                    continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å/–ø–æ—Ä—Ü–∏—é
            portion_g = None
            weight_selectors = [
                '.product-weight', '.ProductWeight', '.product-portion',
                '.item-weight', '.ItemWeight', '.item-portion',
                '.weight', '.Weight', '.portion', '.Portion',
                '[class*="weight"]', '[class*="portion"]'
            ]
            
            for selector in weight_selectors:
                try:
                    weight_elem = await element.query_selector(selector)
                    if weight_elem:
                        weight_text = await weight_elem.text_content()
                        if weight_text:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "250–≥" -> 250)
                            weight_match = re.search(r'(\d+)', weight_text.replace(' ', ''))
                            if weight_match:
                                portion_g = float(weight_match.group(1))
                                break
                except:
                    continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥
            brand = None
            brand_selectors = [
                '.product-brand', '.ProductBrand', '.brand', '.Brand',
                '.manufacturer', '.Manufacturer', '[class*="brand"]'
            ]
            
            for selector in brand_selectors:
                try:
                    brand_elem = await element.query_selector(selector)
                    if brand_elem:
                        brand_text = await brand_elem.text_content()
                        if brand_text and len(brand_text.strip()) > 2:
                            brand = brand_text.strip()[:50]
                            break
                except:
                    continue
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏–∑ URL –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
            product_id = f"lavka_{hash(name + str(price))}"
            if url:
                url_parts = urlparse(url).path.split('/')
                for part in url_parts:
                    if part and part.isdigit():
                        product_id = f"lavka_{part}"
                        break
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if name != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä" and (price or url):
                product = ScrapedProduct(
                    id=product_id,
                    name=name,
                    category=category,
                    price=price,
                    url=url,
                    shop="lavka",
                    composition=composition,
                    portion_g=portion_g
                )
                
                return product
            
            return None
            
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            return None
            
    async def _extract_product_from_card(self, element, category: str) -> Optional[ScrapedProduct]:
        """–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            if not element:
                self.logger.warning(f"[{self.__class__.__name__}] –≠–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω")
                return None
                
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            name_selectors = [
                '.product-name', '.item-name', '.title', 'h3', 'h4', 'h5',
                '.product-title', '.item-title', '.name', '.product-name',
                '[class*="name"]', '[class*="title"]', 'strong', 'b'
            ]
            
            name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"
            for selector in name_selectors:
                try:
                    name_elem = await element.query_selector(selector)
                    if name_elem:
                        name_text = await name_elem.text_content()
                        if name_text and len(name_text.strip()) > 3:
                            name = name_text.strip()
                            break
                except:
                    continue
            
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            if name == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä":
                try:
                    full_text = await element.text_content()
                    if full_text and len(full_text.strip()) > 10:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
                        name = full_text.strip()[:100]
                except:
                    pass
            
            # –¶–µ–Ω–∞ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            price_selectors = [
                '.price', '.cost', '.item-price', '[data-price]', '.product-price',
                '.price-value', '.cost-value', '[class*="price"]', '[class*="cost"]',
                'span[class*="price"]', 'div[class*="price"]'
            ]
            
            price = 0.0
            for selector in price_selectors:
                try:
                    price_elem = await element.query_selector(selector)
                    if price_elem:
                        price_text = await price_elem.text_content()
                        if price_text:
                            price = self._extract_price(price_text)
                            if price > 0:
                                break
                except:
                    continue
            
                        # URL —Ç–æ–≤–∞—Ä–∞
            link_elem = await element.query_selector('a[href]')
            url = ""
            if link_elem:
                try:
                    url = await link_elem.get_attribute('href') or ""
                except:
                    url = ""
            if url and not url.startswith('http'):
                url = urljoin(self.base_url, url)
                
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_elem = await element.query_selector('img[src], img[data-src]')
            image_url = ""
            if img_elem:
                try:
                    image_url = await img_elem.get_attribute('src') or await img_elem.get_attribute('data-src') or ""
                except:
                    image_url = ""
            if image_url and not image_url.startswith('http'):
                image_url = urljoin(self.base_url, image_url)
            
            # ID —Ç–æ–≤–∞—Ä–∞
            product_id = self._extract_product_id(url, element)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
            product = ScrapedProduct(
                id=product_id,
                name=name,
                category=category,
                price=price,
                url=url,
                image_url=image_url,
                shop="lavka",
                available=True
            )
            
            return product
            
        except Exception as e:
            self.logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return None
            
    async def scrape_product_page(self, url: str) -> Optional[ScrapedProduct]:
        """–°–∫—Ä–∞–ø–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–∞ - –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è"""
        try:
            self.logger.info(f"[{self.__class__.__name__}] scrape_product_page –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º scrape_product_page: {e}")
            return None
            
    def _extract_price(self, price_text: str) -> float:
        """–ò–∑–≤–ª–µ—á—å —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
            price_str = re.sub(r'[^\d.,]', '', price_text)
            # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
            price_str = price_str.replace(',', '.')
            return float(price_str) if price_str else 0.0
        except:
            return 0.0
            
    def _extract_product_id(self, url: str, element) -> str:
        """–ò–∑–≤–ª–µ—á—å ID –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ URL –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            if url:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ URL
                parsed = urlparse(url)
                path_parts = parsed.path.strip('/').split('/')
                if path_parts:
                    return path_parts[-1]
            return f"lavka_{int(asyncio.get_event_loop().time())}"
        except:
            return f"lavka_{int(asyncio.get_event_loop().time())}"
