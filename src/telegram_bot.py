"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã
"""
import asyncio
import os
import logging
from typing import Dict, Any, Optional
from pathlib import Path
import json
import tempfile

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from src.main import FoodScraper, load_config
from src.utils.logger import setup_logger


class FoodScraperBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.bot_token = config.get('telegram_bot_token')
        self.allowed_users = config.get('telegram_allowed_users', [])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = setup_logger('telegram_bot', 'INFO', config.get('log_file'))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        self.application = (
            Application.builder()
            .token(self.bot_token)
            .connect_timeout(120.0)  # 120 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            .read_timeout(120.0)     # 120 —Å–µ–∫—É–Ω–¥ –Ω–∞ —á—Ç–µ–Ω–∏–µ
            .write_timeout(120.0)    # 120 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø–∏—Å—å
            .build()
        )
        self._setup_handlers()
        
        # –ö—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        self.active_tasks = {}
        
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –ø–∞—Ä—Å–µ—Ä–∞
        self.application.add_handler(CommandHandler("scrape", self.scrape_command))
        self.application.add_handler(CommandHandler("scrape_all", self.scrape_all_command))
        self.application.add_handler(CommandHandler("scrape_address", self.scrape_address_command))
        self.application.add_handler(CommandHandler("test_samokat", self.test_samokat_command))
        self.application.add_handler(CommandHandler("test_lavka", self.test_lavka_command))
        self.application.add_handler(CommandHandler("test_vkusvill", self.test_vkusvill_command))
        self.application.add_handler(CommandHandler("samokat", self.samokat_command))
        self.application.add_handler(CommandHandler("lavka", self.lavka_command))
        self.application.add_handler(CommandHandler("sources", self.sources_command))
        self.application.add_handler(CommandHandler("categories", self.categories_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
            
        welcome_text = """
ü§ñ –ë–æ—Ç-–ø–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/scrape_all - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–≤–∏–ª–ª–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
/scrape_address - –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏
/scrape - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
/sources - –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏
/categories - –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/status - –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏.
        """
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–≤–∏–ª–ª–∞", callback_data="scrape_all")],
            [InlineKeyboardButton("üìç –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É", callback_data="scrape_address")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data="scrape_menu")],
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="test_sources")],
            [InlineKeyboardButton("üîç –û—Ç–ª–∞–¥–∫–∞ –°–∞–º–æ–∫–∞—Ç–∞", callback_data="debug_samokat")],
            [InlineKeyboardButton("üîç –û—Ç–ª–∞–¥–∫–∞ –õ–∞–≤–∫–∏", callback_data="debug_lavka")],
            [InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="sources_menu")],
            [InlineKeyboardButton("üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories_menu")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="status")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
            
        help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á

–ü–∞—Ä—Å–∏–Ω–≥:
/scrape_all - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–≤–∏–ª–ª–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
/scrape - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
/sources - –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
/categories - –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
/test_samokat - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–∞–º–æ–∫–∞—Ç–∞
/test_lavka - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∏
/test_vkusvill - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–∫—É—Å–í–∏–ª–ª–∞

–û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤ (—Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º):
/samokat - –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –°–∞–º–æ–∫–∞—Ç–∞
/lavka - –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∏

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
‚Ä¢ /scrape_all - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–≤–∏–ª–ª–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ /scrape - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
‚Ä¢ /test_samokat - –±—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–∞–º–æ–∫–∞—Ç–∞
‚Ä¢ /test_lavka - –±—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –õ–∞–≤–∫–∏
‚Ä¢ /test_vkusvill - –±—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–∫—É—Å–í–∏–ª–ª–∞
‚Ä¢ /sources samokat lavka - –ø–∞—Ä—Å–∏–Ω–≥ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –õ–∞–≤–∫–∏
‚Ä¢ /categories –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ —Å–∞–ª–∞—Ç—ã - –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:
‚Ä¢ samokat - –°–∞–º–æ–∫–∞—Ç
‚Ä¢ lavka - –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞  
‚Ä¢ vkusvill - –í–∫—É—Å–í–∏–ª–ª

–§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:
‚Ä¢ CSV - —Ç–∞–±–ª–∏—Ü–∞ Excel
‚Ä¢ JSONL - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ SQLite - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
        
    async def scrape_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /scrape"""
            
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args if context.args else []
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        scrape_config = self.config.copy()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if args:
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
            if 'samokat' in args or 'lavka' in args or 'vkusvill' in args:
                sources = [arg for arg in args if arg in ['samokat', 'lavka', 'vkusvill']]
                scrape_config['sources'] = sources
                
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = [arg for arg in args if arg not in ['samokat', 'lavka', 'vkusvill']]
            if categories:
                scrape_config['categories'] = categories
                
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await self._start_scraping(update, context, scrape_config)
        
    async def scrape_all_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /scrape_all - –ø–∞—Ä—Å–∏–Ω–≥ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–≤–∏–ª–ª–∞ –¥–ª—è –ú–æ—Å–∫–≤—ã"""
            
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–≤–∏–ª–ª–∞
        scrape_config = self.config.copy()
        scrape_config['sources'] = ['samokat', 'vkusvill']  # –£–±–∏—Ä–∞–µ–º –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫—É
        scrape_config['city'] = '–ú–æ—Å–∫–≤–∞'  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ú–æ—Å–∫–≤–∞
        scrape_config['limit'] = 200  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 1000-2000 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–∏—Å
        scrape_config['headless'] = True
        scrape_config['max_concurrent'] = 2  # –£–º–µ–Ω—å—à–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 2 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        scrape_config['throttle_min'] = 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        scrape_config['throttle_max'] = 0.3
        
        await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–≤–∏–ª–ª–∞ –¥–ª—è –ú–æ—Å–∫–≤—ã\n\n" +
                                       "üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏: –°–∞–º–æ–∫–∞—Ç, –í–∫—É—Å–í–∏–ª–ª\n" +
                                       "üèôÔ∏è –ì–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞\n" +
                                       "üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: 10+ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)\n" +
                                       "üì¶ –õ–∏–º–∏—Ç: –î–æ 200 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n" +
                                       "üéØ –¶–µ–ª—å: 1000-2000 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–∏—Å\n" +
                                       "‚ö° –†–µ–∂–∏–º: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n" +
                                       "‚è≥ –í—Ä–µ–º—è: –û–∂–∏–¥–∞–π—Ç–µ, —ç—Ç–æ –∑–∞–π–º–µ—Ç 4-6 –º–∏–Ω—É—Ç")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await self._start_scraping(update, context, scrape_config)
        
    async def scrape_address_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /scrape_address - –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏"""
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args if context.args else []
        
        if not args:
            await update.message.reply_text(
                "üìç –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /scrape_address <–∞–¥—Ä–µ—Å>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /scrape_address –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1\n"
                "‚Ä¢ /scrape_address –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 28\n"
                "‚Ä¢ /scrape_address –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –õ–µ–Ω–∏–Ω–∞, 5\n\n"
                "–ë–æ—Ç –Ω–∞–π–¥–µ—Ç —Ç–æ–≤–∞—Ä—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.",
                parse_mode='Markdown'
            )
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –∞–¥—Ä–µ—Å
        address = " ".join(args)
        
        await update.message.reply_text(
            f"üìç –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É: {address}\n\n"
            "üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É...\n"
            "‚è±Ô∏è –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            parse_mode='Markdown'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∞–¥—Ä–µ—Å—É
        scrape_config = self.config.copy()
        scrape_config['sources'] = ['samokat', 'lavka', 'vkusvill']
        scrape_config['limit'] = 150  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
        scrape_config['headless'] = True
        scrape_config['max_concurrent'] = 3  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        scrape_config['throttle_min'] = 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        scrape_config['throttle_max'] = 0.3
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É
        await self._start_scraping_by_address(update, context, scrape_config, address)
        
    async def sources_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /sources"""
            
        keyboard = [
            [InlineKeyboardButton("–°–∞–º–æ–∫–∞—Ç", callback_data="source_samokat")],
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞", callback_data="source_lavka")],
            [InlineKeyboardButton("–í–∫—É—Å–í–∏–ª–ª", callback_data="source_vkusvill")],
            [InlineKeyboardButton("–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="source_all")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n"
            "‚Ä¢ –°–∞–º–æ–∫–∞—Ç - –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è\n"
            "‚Ä¢ –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞ - –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥–æ—Ç–æ–≤–∞—è –µ–¥–∞\n"
            "‚Ä¢ –í–∫—É—Å–í–∏–ª–ª - —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    async def categories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /categories"""
            
        keyboard = [
            [InlineKeyboardButton("–ì–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞", callback_data="cat_ready_food")],
            [InlineKeyboardButton("–°–∞–ª–∞—Ç—ã", callback_data="cat_salads")],
            [InlineKeyboardButton("–°—É–ø—ã", callback_data="cat_soups")],
            [InlineKeyboardButton("–ö—É–ª–∏–Ω–∞—Ä–∏—è", callback_data="cat_cooking")],
            [InlineKeyboardButton("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="cat_all")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üè∑Ô∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:*\n\n"
            "‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞\n"
            "‚Ä¢ –°–∞–ª–∞—Ç—ã - —Å–≤–µ–∂–∏–µ –∏ –≥–æ—Ç–æ–≤—ã–µ —Å–∞–ª–∞—Ç—ã\n"
            "‚Ä¢ –°—É–ø—ã - –≥–æ—Ä—è—á–∏–µ –∏ —Ö–æ–ª–æ–¥–Ω—ã–µ —Å—É–ø—ã\n"
            "‚Ä¢ –ö—É–ª–∏–Ω–∞—Ä–∏—è - –≤—ã–ø–µ—á–∫–∞ –∏ –¥–µ—Å–µ—Ä—Ç—ã",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
            
        user_id = update.effective_user.id
        
        if user_id in self.active_tasks:
            task_info = self.active_tasks[user_id]
            status_text = f"""
üìä *–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:*

üÜî ID: {task_info['task_id']}
üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {task_info['start_time']}
üîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(task_info['sources'])}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(task_info['categories']) if task_info['categories'] else '–í—Å–µ'}
‚è±Ô∏è –°—Ç–∞—Ç—É—Å: {task_info['status']}
üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {task_info.get('progress', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            """
        else:
            status_text = "üìä *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scrape –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞."
            
        await update.message.reply_text(status_text, parse_mode='Markdown')
        
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
            
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "main_menu":
            await self._show_main_menu(query)
        elif data == "scrape_menu":
            await self._show_scrape_menu(query)
        elif data.startswith("source_"):
            await self._handle_source_selection(query, data)
        elif data.startswith("cat_"):
            await self._handle_category_selection(query, data)
        elif data == "start_scraping":
            await self._start_scraping_from_menu(query, context)
        elif data == "scrape_all":
            await self._start_scraping_all_from_menu(query, context)
        elif data == "test_sources":
            await self._show_test_sources_menu(query)
        elif data.startswith("test_"):
            await self._handle_test_source(query, context, data)
        elif data.startswith("debug_"):
            await self._handle_debug_source(query, context, data)
        elif data == "status":
            await self._show_status(query)
            
    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üöÄ –ü–∞—Ä—Å–∏–Ω–≥ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–≤–∏–ª–ª–∞", callback_data="scrape_all")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data="scrape_menu")],
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="test_sources")],
            [InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="sources_menu")],
            [InlineKeyboardButton("üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories_menu")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="status")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "ü§ñ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    async def _show_scrape_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        keyboard = [
            [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="start_scraping")],
            [InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="sources_menu")],
            [InlineKeyboardButton("üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories_menu")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞*\n\n"
            "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"üìç –ì–æ—Ä–æ–¥: {self.config.get('city', '–ú–æ—Å–∫–≤–∞')}\n"
            f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(self.config.get('sources', ['samokat', 'lavka', 'vkusvill']))}\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(self.config.get('categories', [])) or '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    async def _handle_source_selection(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        source = data.replace("source_", "")
        
        if source == "all":
            self.config['sources'] = ['samokat', 'lavka', 'vkusvill']
        else:
            if source not in self.config.get('sources', []):
                self.config['sources'] = [source]
            else:
                self.config['sources'].remove(source)
                
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await self._show_scrape_menu(query)
        
    async def _show_test_sources_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç –°–∞–º–æ–∫–∞—Ç–∞", callback_data="test_samokat")],
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∏", callback_data="test_lavka")],
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç –í–∫—É—Å–í–∏–ª–ª–∞", callback_data="test_vkusvill")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üß™ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            "‚Ä¢ *–°–∞–º–æ–∫–∞—Ç* - –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è\n"
            "‚Ä¢ *–Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞* - –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥–æ—Ç–æ–≤–∞—è –µ–¥–∞\n"
            "‚Ä¢ *–í–∫—É—Å–í–∏–ª–ª* - —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞\n\n"
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–π–º–µ—Ç 3-5 –º–∏–Ω—É—Ç –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    async def _handle_category_selection(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        category = data.replace("cat_", "")
        
        if category == "all":
            self.config['categories'] = []
        else:
            category_map = {
                "ready_food": "–≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞",
                "salads": "—Å–∞–ª–∞—Ç—ã", 
                "soups": "—Å—É–ø—ã",
                "cooking": "–∫—É–ª–∏–Ω–∞—Ä–∏—è"
            }
            
            if category in category_map:
                cat_name = category_map[category]
                if cat_name not in self.config.get('categories', []):
                    self.config['categories'] = [cat_name]
                else:
                    self.config['categories'].remove(cat_name)
                    
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await self._show_scrape_menu(query)
        
    async def _handle_test_source(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        source = data.replace("test_", "")
        
        if source == "samokat":
            await self._start_test_scraping(query, context, ['samokat'], "–°–∞–º–æ–∫–∞—Ç")
        elif source == "lavka":
            await self._start_test_scraping(query, context, ['lavka'], "–Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞")
        elif source == "vkusvill":
            await self._start_test_scraping(query, context, ['vkusvill'], "–í–∫—É—Å–í–∏–ª–ª")
        else:
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
    async def _handle_debug_source(self, query, context, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        source = data.replace("debug_", "")
        
        if source == "samokat":
            await self._start_debug_scraping(query, context, ['samokat'], "–°–∞–º–æ–∫–∞—Ç")
        elif source == "lavka":
            await self._start_debug_scraping(query, context, ['lavka'], "–Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞")
        else:
            await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
            
    async def _start_debug_scraping(self, query, context, sources, source_name):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        await query.edit_message_text(f"üîç *–û—Ç–ª–∞–¥–∫–∞ {source_name}...*\n\n" +
                                    f"üîç *–ò—Å—Ç–æ—á–Ω–∏–∫:* {source_name}\n" +
                                    f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n" +
                                    f"üì¶ *–õ–∏–º–∏—Ç:* 100 —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)\n" +
                                    f"üñ•Ô∏è *–†–µ–∂–∏–º:* –° –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞\n" +
                                    f"üìù *–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:* –ü–æ–¥—Ä–æ–±–Ω–æ–µ\n" +
                                    f"‚è≥ *–í—Ä–µ–º—è:* –û–∂–∏–¥–∞–π—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 3-5 –º–∏–Ω—É—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        scrape_config = self.config.copy()
        scrape_config['sources'] = sources
        scrape_config['limit'] = 100
        scrape_config['headless'] = False
        scrape_config['max_concurrent'] = 1
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
        await self._start_scraping_with_debug(query, context, scrape_config, source_name)
            
    async def _start_test_scraping(self, query, context, sources, source_name):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        await query.edit_message_text(f"üß™ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {source_name}...*\n\n" +
                                    f"üîç *–ò—Å—Ç–æ—á–Ω–∏–∫:* {source_name}\n" +
                                    f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n" +
                                    f"‚è≥ *–í—Ä–µ–º—è:* –û–∂–∏–¥–∞–π—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 3-5 –º–∏–Ω—É—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        scrape_config = self.config.copy()
        scrape_config['sources'] = sources
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await self._start_scraping(query, context, scrape_config)
        
    async def _start_scraping_from_menu(self, query, context):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –º–µ–Ω—é"""
        await query.edit_message_text("üöÄ *–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...*\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await self._start_scraping(query, context, self.config)
        
    async def _start_scraping_all_from_menu(self, query, context):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–≤–∏–ª–ª–∞ –∏–∑ –º–µ–Ω—é"""
        await query.edit_message_text("üöÄ *–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–≤–∏–ª–ª–∞...*\n\n" +
                                    "üìä *–ò—Å—Ç–æ—á–Ω–∏–∫–∏:* –°–∞–º–æ–∫–∞—Ç, –í–∫—É—Å–í–∏–ª–ª\n" +
                                    "üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n" +
                                    "üì¶ *–õ–∏–º–∏—Ç:* –î–æ 500 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n" +
                                    "‚è≥ *–í—Ä–µ–º—è:* –û–∂–∏–¥–∞–π—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 4-8 –º–∏–Ω—É—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–≤–∏–ª–ª–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        scrape_config = self.config.copy()
        scrape_config['sources'] = ['samokat', 'vkusvill']  # –£–±–∏—Ä–∞–µ–º –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫—É
        scrape_config['limit'] = 500  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        scrape_config['headless'] = True  # –°–∫—Ä—ã—Ç—ã–π –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        scrape_config['max_concurrent'] = 2  # –£–º–µ–Ω—å—à–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 2 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await self._start_scraping(query, context, scrape_config)
        
    async def test_samokat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_samokat - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–∞–º–æ–∫–∞—Ç–∞"""
            
        scrape_config = self.config.copy()
        scrape_config['sources'] = ['samokat']
        
        await update.message.reply_text("üß™ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–∞–º–æ–∫–∞—Ç–∞*\n\n" +
                                       "üîç *–ò—Å—Ç–æ—á–Ω–∏–∫:* –°–∞–º–æ–∫–∞—Ç\n" +
                                       "üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n" +
                                       "üì¶ *–õ–∏–º–∏—Ç:* –î–æ 500 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n" +
                                       "‚è≥ *–í—Ä–µ–º—è:* –û–∂–∏–¥–∞–π—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        scrape_config['limit'] = 500
        scrape_config['headless'] = True
        scrape_config['max_concurrent'] = 4
        
        await self._start_scraping(update, context, scrape_config)
        
    async def test_lavka_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_lavka - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –õ–∞–≤–∫–∏"""
            
        scrape_config = self.config.copy()
        scrape_config['sources'] = ['lavka']
        
        await update.message.reply_text("üß™ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∏*\n\n" +
                                       "üîç *–ò—Å—Ç–æ—á–Ω–∏–∫:* –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞\n" +
                                       "üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n" +
                                       "üì¶ *–õ–∏–º–∏—Ç:* –î–æ 500 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n" +
                                       "‚è≥ *–í—Ä–µ–º—è:* –û–∂–∏–¥–∞–π—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        scrape_config['limit'] = 500
        scrape_config['headless'] = True
        scrape_config['max_concurrent'] = 4
        
        await self._start_scraping(update, context, scrape_config)
        
    async def test_vkusvill_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_vkusvill - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–∫—É—Å–í–∏–ª–ª–∞"""
            
        scrape_config = self.config.copy()
        scrape_config['sources'] = ['vkusvill']
        
        await update.message.reply_text("üß™ *–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–∫—É—Å–í–∏–ª–ª–∞*\n\n" +
                                       "üîç *–ò—Å—Ç–æ—á–Ω–∏–∫:* –í–∫—É—Å–í–∏–ª–ª\n" +
                                       "üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n" +
                                       "üì¶ *–õ–∏–º–∏—Ç:* –î–æ 500 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n" +
                                       "‚è≥ *–í—Ä–µ–º—è:* –û–∂–∏–¥–∞–π—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        scrape_config['limit'] = 500
        scrape_config['headless'] = True
        scrape_config['max_concurrent'] = 4
        
        await self._start_scraping(update, context, scrape_config)
        
    async def samokat_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /samokat - –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –°–∞–º–æ–∫–∞—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.logger.info("–ö–æ–º–∞–Ω–¥–∞ /samokat –≤—ã–∑–≤–∞–Ω–∞")
        
        scrape_config = self.config.copy()
        scrape_config['sources'] = ['samokat']
        scrape_config['limit'] = 100  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        scrape_config['headless'] = False  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        scrape_config['max_concurrent'] = 1  # –û–¥–∏–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        await update.message.reply_text("üîç *–ü–∞—Ä—Å–∏–Ω–≥ –°–∞–º–æ–∫–∞—Ç–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π*\n\n" +
                                       "üîç *–ò—Å—Ç–æ—á–Ω–∏–∫:* –°–∞–º–æ–∫–∞—Ç\n" +
                                       "üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n" +
                                       "üì¶ *–õ–∏–º–∏—Ç:* 100 —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)\n" +
                                       "üñ•Ô∏è *–†–µ–∂–∏–º:* –° –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞\n" +
                                       "üìù *–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:* –ü–æ–¥—Ä–æ–±–Ω–æ–µ\n" +
                                       "‚è≥ *–í—Ä–µ–º—è:* –û–∂–∏–¥–∞–π—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 3-5 –º–∏–Ω—É—Ç")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await self._start_scraping_with_debug(update, context, scrape_config, "–°–∞–º–æ–∫–∞—Ç")
        
    async def lavka_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /lavka - –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.logger.info("–ö–æ–º–∞–Ω–¥–∞ /lavka –≤—ã–∑–≤–∞–Ω–∞")
        
        scrape_config = self.config.copy()
        scrape_config['sources'] = ['lavka']
        scrape_config['limit'] = 100  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        scrape_config['headless'] = False  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        scrape_config['max_concurrent'] = 1  # –û–¥–∏–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        await update.message.reply_text("üîç *–ü–∞—Ä—Å–∏–Ω–≥ –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∏ —Å –æ—Ç–ª–∞–¥–∫–æ–π*\n\n" +
                                       "üîç *–ò—Å—Ç–æ—á–Ω–∏–∫:* –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞\n" +
                                       "üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n" +
                                       "üì¶ *–õ–∏–º–∏—Ç:* 100 —Ç–æ–≤–∞—Ä–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)\n" +
                                       "üñ•Ô∏è *–†–µ–∂–∏–º:* –° –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –±—Ä–∞—É–∑–µ—Ä–∞\n" +
                                       "üìù *–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:* –ü–æ–¥—Ä–æ–±–Ω–æ–µ\n" +
                                       "‚è≥ *–í—Ä–µ–º—è:* –û–∂–∏–¥–∞–π—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 3-5 –º–∏–Ω—É—Ç")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await self._start_scraping_with_debug(update, context, scrape_config, "–Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞")
        
    async def _start_scraping_with_debug(self, update, context, scrape_config, source_name):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø update (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback)
        if hasattr(update, 'message'):
            user_id = update.effective_user.id
            message = update.message
        else:
            user_id = update.from_user.id
            message = update
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task_id = f"debug_{source_name.lower()}_{user_id}_{int(asyncio.get_event_loop().time())}"
        
        task_info = {
            'task_id': task_id,
            'start_time': asyncio.get_event_loop().time(),
            'sources': scrape_config.get('sources', [source_name.lower()]),
            'categories': scrape_config.get('categories', []),
            'status': f'–û—Ç–ª–∞–¥–∫–∞ {source_name}...',
            'progress': '0%',
            'debug_mode': True
        }
        
        self.active_tasks[user_id] = task_info
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._run_debug_scraping_task(update, context, scrape_config, task_info, source_name))
        
    async def _run_debug_scraping_task(self, update, context, scrape_config, task_info, source_name):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø update (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback)
        if hasattr(update, 'message'):
            user_id = update.effective_user.id
            message = update.message
        else:
            user_id = update.from_user.id
            message = update
        
        try:
            self.logger.info(f"=== –ù–ê–ß–ê–õ–û –û–¢–õ–ê–î–ö–ò {source_name.upper()} ===")
            self.logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {scrape_config}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–µ–π–ø–µ—Ä
            try:
                self.logger.info(f"–°–æ–∑–¥–∞–µ–º FoodScraper —Å –∫–æ–Ω—Ñ–∏–≥–æ–º: {scrape_config}")
                scraper = FoodScraper(scrape_config)
                self.logger.info(f"–°–∫—Ä–µ–π–ø–µ—Ä {source_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                await message.reply_text(f"‚úÖ *–°–∫—Ä–µ–π–ø–µ—Ä {source_name} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ*")
            except Exception as e:
                error_msg = f"‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–µ–π–ø–µ—Ä–∞ {source_name}:* {str(e)}"
                await message.reply_text(error_msg)
                self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–µ–π–ø–µ—Ä–∞ {source_name}: {e}")
                import traceback
                self.logger.error(f"Traceback: {traceback.format_exc()}")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∫—Ä–µ–π–ø–µ—Ä–æ–≤
            try:
                sources = list(scraper.scrapers.keys())
                self.logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {sources}")
                await message.reply_text(f"üìä *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:* {', '.join(sources)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Å–ø–∏—Å–∫–µ (–∏—â–µ–º –ø–æ –∫–ª—é—á—É, –∞ –Ω–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
                source_key = source_name.lower().replace('—è–Ω–¥–µ–∫—Å.–ª–∞–≤–∫–∞', 'lavka').replace('—Å–∞–º–æ–∫–∞—Ç', 'samokat')
                self.logger.info(f"–ò—â–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ '{source_name}' —Å –∫–ª—é—á–æ–º '{source_key}' –≤ —Å–ø–∏—Å–∫–µ {sources}")
                if source_key not in sources:
                    error_msg = f"‚ùå *–ò—Å—Ç–æ—á–Ω–∏–∫ {source_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö*"
                    await message.reply_text(error_msg)
                    self.logger.error(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {source_name} (–∫–ª—é—á: {source_key}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {sources}")
                    return
                    
                scraper_instance = scraper.scrapers[source_key]
                if not scraper_instance:
                    error_msg = f"‚ùå *–°–∫—Ä–µ–π–ø–µ—Ä {source_name} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω*"
                    await message.reply_text(error_msg)
                    self.logger.error(f"–°–∫—Ä–µ–π–ø–µ—Ä {source_name} (–∫–ª—é—á: {source_key}) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return
                    
                self.logger.info(f"–°–∫—Ä–µ–π–ø–µ—Ä {source_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {type(scraper_instance).__name__}")
                await message.reply_text(f"‚úÖ *–°–∫—Ä–µ–π–ø–µ—Ä {source_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω*")
                
            except Exception as e:
                error_msg = f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–µ–π–ø–µ—Ä–∞ {source_name}:* {str(e)}"
                await message.reply_text(error_msg)
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–µ–π–ø–µ—Ä–∞ {source_name}: {e}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                self.logger.info(f"–ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {source_name}")
                await message.reply_text(f"üîç *–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {source_name}...*")
                
                categories = await scraper_instance.get_categories()
                self.logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {source_name}: {categories}")
                await message.reply_text(f"üìã *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ {source_name}:*\n" + "\n".join([f"‚Ä¢ {cat}" for cat in categories[:5]]))
                
                if not categories:
                    error_msg = f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {source_name}*"
                    await message.reply_text(error_msg)
                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {source_name}")
                    return
                    
            except Exception as e:
                error_msg = f"‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π {source_name}:* {str(e)}"
                await message.reply_text(error_msg)
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π {source_name}: {e}")
                return
            
            # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                test_category = categories[0]
                self.logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{test_category}' –¥–ª—è {source_name}")
                await message.reply_text(f"üß™ *–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é:* {test_category}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Å–∫—Ä–µ–π–ø–µ—Ä–∞
                self.logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è {source_name}")
                await message.reply_text(f"üåê *–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è {source_name}...*")
                
                async with scraper_instance:
                    self.logger.info(f"–ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {source_name}")
                    await message.reply_text(f"‚úÖ *–ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è {source_name}*")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    products = await self._debug_scrape_category(scraper_instance, test_category, message, source_name)
                
                if products:
                    self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {source_name}")
                    await message.reply_text(f"‚úÖ *–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {source_name}*")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    sample_products = products[:3]
                    for i, product in enumerate(sample_products, 1):
                        product_info = f"üì¶ *–¢–æ–≤–∞—Ä {i}:*\n" + \
                                     f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n" + \
                                     f"‚Ä¢ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n" + \
                                     f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category}\n" + \
                                     f"‚Ä¢ URL: {product.url[:50]}..." if product.url else "‚Ä¢ URL: –Ω–µ —É–∫–∞–∑–∞–Ω"
                        await message.reply_text(product_info)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    await self._save_and_send_debug_results(products, source_name, message, context)
                else:
                    error_msg = f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ {source_name}*"
                    await message.reply_text(error_msg)
                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ {source_name}")
                    
            except Exception as e:
                error_msg = f"‚ùå *–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {source_name}:* {str(e)}"
                await message.reply_text(error_msg)
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {source_name}: {e}")
                import traceback
                self.logger.error(f"Traceback: {traceback.format_exc()}")
                
        except Exception as e:
            error_msg = f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {source_name}:* {str(e)}"
            await message.reply_text(error_msg)
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {source_name}: {e}")
            import traceback
            self.logger.error(f"Traceback: {traceback.format_exc()}")
            
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if user_id in self.active_tasks:
                del self.active_tasks[user_id]
            self.logger.info(f"=== –ö–û–ù–ï–¶ –û–¢–õ–ê–î–ö–ò {source_name.upper()} ===")
            
    async def _debug_scrape_category(self, scraper_instance, category, message, source_name):
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –¥–ª—è {source_name}")
            
            # –ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            self.logger.info(f"–ë—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ {source_name}")
            await message.reply_text(f"üîÑ *–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –¥–ª—è {source_name}...*")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
            try:
                self.logger.info(f"–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –¥–ª—è {source_name}")
                await message.reply_text(f"üìç *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è {source_name}...*")
                await scraper_instance.setup_location()
                self.logger.info(f"–õ–æ–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è {source_name}")
                await message.reply_text(f"‚úÖ *–õ–æ–∫–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è {source_name}*")
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è {source_name}: {e}")
                await message.reply_text(f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è {source_name}:* {str(e)}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            try:
                self.logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –¥–ª—è {source_name}")
                
                products = await scraper_instance.scrape_category(category, 10)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                
                self.logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {source_name}. –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                await message.reply_text(f"‚úÖ *–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {source_name}. –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}*")
                
                return products
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –¥–ª—è {source_name}: {e}")
                await message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –¥–ª—è {source_name}:* {str(e)}")
                import traceback
                self.logger.error(f"Traceback: {traceback.format_exc()}")
                return []
                
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _debug_scrape_category –¥–ª—è {source_name}: {e}")
            await message.reply_text(f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ {source_name}:* {str(e)}")
            import traceback
            self.logger.error(f"Traceback: {traceback.format_exc()}")
            return []
            
    async def _save_and_send_debug_results(self, products, source_name, message, context):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ª–∞–¥–∫–∏"""
        try:
            import json
            import csv
            from datetime import datetime
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            source_key = source_name.lower().replace('—è–Ω–¥–µ–∫—Å.–ª–∞–≤–∫–∞', 'lavka').replace('—Å–∞–º–æ–∫–∞—Ç', 'samokat')
            filename = f"debug_{source_key}_{timestamp}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            json_file = f"data/out/{filename}.json"
            os.makedirs(os.path.dirname(json_file), exist_ok=True)
            
            products_data = []
            for product in products:
                product_dict = {
                    'id': product.id,
                    'name': product.name,
                    'category': product.category,
                    'price': product.price,
                    'url': product.url,
                    'shop': product.shop,
                    'composition': product.composition,
                    'portion_g': product.portion_g,
                    'kcal_100g': product.kcal_100g,
                    'protein_100g': product.protein_100g,
                    'fat_100g': product.fat_100g,
                    'carb_100g': product.carb_100g
                }
                products_data.append(product_dict)
            
            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(products_data, f, ensure_ascii=False, indent=2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            csv_file = f"data/out/{filename}.csv"
            with open(csv_file, 'w', newline='', encoding='utf-8') as f:
                if products_data:
                    writer = csv.DictWriter(f, fieldnames=products_data[0].keys())
                    writer.writeheader()
                    writer.writerows(products_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            await message.reply_text(f"üìÅ *–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ª–∞–¥–∫–∏ {source_name}...*")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Ñ–∞–π–ª
            try:
                with open(json_file, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=message.chat.id,
                        document=f,
                        filename=f"{filename}.json",
                        caption=f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∞–¥–∫–∏ {source_name} (JSON)*\n"
                               f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}\n"
                               f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                    )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON —Ñ–∞–π–ª–∞: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
            try:
                with open(csv_file, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=message.chat.id,
                        document=f,
                        filename=f"{filename}.csv",
                        caption=f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∞–¥–∫–∏ {source_name} (CSV)*\n"
                               f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}\n"
                               f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                    )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ CSV —Ñ–∞–π–ª–∞: {e}")
            
            await message.reply_text(f"‚úÖ *–§–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–ª–∞–¥–∫–∏ {source_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!*")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ª–∞–¥–∫–∏: {e}")
            await message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:* {str(e)}")
        
    async def _start_scraping(self, update, context, scrape_config):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        user_id = update.effective_user.id if hasattr(update, 'effective_user') else update.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task_id = f"task_{user_id}_{int(asyncio.get_event_loop().time())}"
        
        task_info = {
            'task_id': task_id,
            'start_time': asyncio.get_event_loop().time(),
            'sources': scrape_config.get('sources', ['samokat']),
            'categories': scrape_config.get('categories', []),
            'status': '–ó–∞–ø—É—Å–∫...',
            'progress': '0%'
        }
        
        self.active_tasks[user_id] = task_info
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._run_scraping_task(update, context, scrape_config, task_info))
        
    async def _start_scraping_by_address(self, update, context, scrape_config, address):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∞–¥—Ä–µ—Å—É"""
        user_id = update.effective_user.id if hasattr(update, 'effective_user') else update.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task_id = f"address_task_{user_id}_{int(asyncio.get_event_loop().time())}"
        
        task_info = {
            'task_id': task_id,
            'start_time': asyncio.get_event_loop().time(),
            'sources': scrape_config.get('sources', ['samokat']),
            'categories': scrape_config.get('categories', []),
            'status': f'–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É: {address}',
            'progress': '0%',
            'address': address
        }
        
        self.active_tasks[user_id] = task_info
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._run_scraping_by_address_task(update, context, scrape_config, task_info, address))
        
    async def _run_scraping_by_address_task(self, update, context, scrape_config, task_info, address):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∞–¥—Ä–µ—Å—É"""
        user_id = update.effective_user.id if hasattr(update, 'effective_user') else update.from_user.id
        message = update.message if hasattr(update, 'message') else update
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–µ–π–ø–µ—Ä
            try:
                scraper = FoodScraper(scrape_config)
            except Exception as e:
                await message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–µ–π–ø–µ—Ä–∞:* {str(e)}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–µ–π–ø–µ—Ä–∞: {e}")
                return
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É
            result = await self._run_scraping_by_address_with_progress(scraper, message, task_info, address)
            
            if result:
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                export_files = await self._export_data(scraper, user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await self._send_results(message, context, export_files, task_info)
                
            else:
                task_info['status'] = '–û—à–∏–±–∫–∞'
                await message.reply_text("‚ùå *–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
                
        except Exception as e:
            task_info['status'] = f'–û—à–∏–±–∫–∞: {str(e)}'
            await message.reply_text(f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:*\n\n{str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∞–¥—Ä–µ—Å—É: {e}")
            
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if user_id in self.active_tasks:
                del self.active_tasks[user_id]
                
    async def _run_scraping_by_address_with_progress(self, scraper, message, task_info, address):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ –∞–¥—Ä–µ—Å—É —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        try:
            self.logger.info(f"_run_scraping_by_address_with_progress –≤—ã–∑–≤–∞–Ω –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            task_info['status'] = f'–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É: {address}'
            task_info['progress'] = '10%'
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –∞–¥—Ä–µ—Å—É
            all_products = await scraper.scrape_by_address(address)
            
            if not all_products:
                await message.reply_text(f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞:* {address}")
                return False
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            total_saved = await scraper.save_products(all_products)
            
            if total_saved > 0:
                task_info['status'] = f'–ù–∞–π–¥–µ–Ω–æ {total_saved} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address}'
                task_info['progress'] = '100%'
                return True
            else:
                await message.reply_text(f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞:* {address}")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _run_scraping_by_address_with_progress: {e}")
            return False
        
    async def _run_scraping_task(self, update, context, scrape_config, task_info):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        user_id = update.effective_user.id if hasattr(update, 'effective_user') else update.from_user.id
        message = update.message if hasattr(update, 'message') else update
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–µ–π–ø–µ—Ä
            try:
                scraper = FoodScraper(scrape_config)
            except Exception as e:
                await message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–µ–π–ø–µ—Ä–∞:* {str(e)}")
                self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä–µ–π–ø–µ—Ä–∞: {e}")
                return
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            result = await self._run_scraping_with_progress(scraper, message, task_info)
            
            if result:
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                export_files = await self._export_data(scraper, user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await self._send_results(message, context, export_files, task_info)
                
            else:
                task_info['status'] = '–û—à–∏–±–∫–∞'
                await message.reply_text("‚ùå *–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏*\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
                
        except Exception as e:
            task_info['status'] = f'–û—à–∏–±–∫–∞: {str(e)}'
            await message.reply_text(f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:*\n\n{str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if user_id in self.active_tasks:
                del self.active_tasks[user_id]
                
    async def _run_scraping_with_progress(self, scraper, message, task_info):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (3-5 —Å–æ–æ–±—â–µ–Ω–∏–π)"""
        try:
            self.logger.info("_run_scraping_with_progress –≤—ã–∑–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            sources = list(scraper.scrapers.keys())
            total_sources = len(sources)
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}, —Å–ø–∏—Å–æ–∫: {sources}")
            
            if total_sources == 0:
                self.logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                await message.reply_text("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∫—Ä–µ–π–ø–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            for source_name in sources:
                self.logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–µ–π–ø–µ—Ä {source_name}: {scraper.scrapers[source_name]}")
                if not scraper.scrapers[source_name]:
                    self.logger.error(f"–°–∫—Ä–µ–π–ø–µ—Ä {source_name} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    await message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞:* –°–∫—Ä–µ–π–ø–µ—Ä {source_name} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    return False
                
            # –°–æ–æ–±—â–µ–Ω–∏–µ 1: –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            self.logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞")
            await message.reply_text(f"üöÄ *–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {total_sources} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤*\n" +
                                   f"üîç *–ò—Å—Ç–æ—á–Ω–∏–∫–∏:* {', '.join(sources)}")
            
            all_products = {}
            total_products = 0
            self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            
            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            for i, (source_name, scraper_instance) in enumerate(scraper.scrapers.items()):
                try:
                    self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_name} ({i+1}/{total_sources})")
                    
                    # –°–æ–æ–±—â–µ–Ω–∏–µ 2: –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    await message.reply_text(f"üîç *–ü–∞—Ä—Å–∏–Ω–≥ {source_name}...*")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    categories = task_info.get('categories', [])
                    self.logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ task_info: {categories}")
                    
                    if not categories:
                        try:
                            self.logger.info(f"–ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {source_name}")
                            source_categories = await scraper_instance.get_categories()
                            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {source_name}: {source_categories}")
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã
                            filtered_categories = [cat for cat in source_categories if any(
                                keyword in cat.lower() for keyword in 
                                ['–≥–æ—Ç–æ–≤', '–∫—É–ª–∏–Ω–∞—Ä', '—Å–∞–ª–∞—Ç', '—Å—É–ø', '–±–ª—é–¥', '–µ–¥–∞', '–∫—É—Ö–Ω—è', '–∫—É–ª–∏–Ω–∞—Ä']
                            )]
                            categories = filtered_categories[:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                            self.logger.info(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {source_name}: {categories}")
                        except Exception as e:
                            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {source_name}: {e}")
                            categories = ['–ì–æ—Ç–æ–≤–∞—è –µ–¥–∞', '–ö—É–ª–∏–Ω–∞—Ä–∏—è', '–°–∞–ª–∞—Ç—ã', '–°—É–ø—ã', '–ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞']
                            self.logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è {source_name}: {categories}")
                    
                    # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
                    source_products = []
                    self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è {source_name}")
                    
                    for j, category in enumerate(categories):
                        try:
                            self.logger.info(f"–ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category} ({j+1}/{len(categories)}) –¥–ª—è {source_name}")
                            category_products = await scraper_instance.scrape_category(category, scraper.config.get('limit'))
                            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(category_products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –¥–ª—è {source_name}")
                            source_products.extend(category_products)
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –¥–ª—è {source_name}: {e}")
                            continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    self.logger.info(f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(source_products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è {source_name}")
                    all_products[source_name] = source_products
                    total_products += len(source_products)
                    
                    # –°–æ–æ–±—â–µ–Ω–∏–µ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
                    await message.reply_text(f"‚úÖ *{source_name} –∑–∞–≤–µ—Ä—à–µ–Ω*\n" +
                                           f"üì¶ *–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:* {len(source_products)}")
                    
                except Exception as e:
                    await message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞ –≤ {source_name}:* {str(e)}")
                    all_products[source_name] = []
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_products}")
            
            if total_products > 0:
                # –°–æ–æ–±—â–µ–Ω–∏–µ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                self.logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ë–î")
                await message.reply_text(f"üíæ *–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {total_products} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ë–î...*")
                
                try:
                    saved_count = await scraper.save_products(all_products)
                    self.logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                    saved_count = 0
                
                # –°–æ–æ–±—â–µ–Ω–∏–µ 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                await message.reply_text(f"üéâ *–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!*\n" +
                                       f"üìä *–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:* {total_products}\n" +
                                       f"üíæ *–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:* {saved_count}")
                
                return True
            else:
                self.logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
                await message.reply_text("‚ùå *–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞*\n\n" +
                                       "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
                return False
                
        except Exception as e:
            await message.reply_text(f"‚ùå *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:* {str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ _run_scraping_with_progress: {e}")
            return False
                
    async def _export_data(self, scraper, user_id):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        export_files = {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                all_products = scraper.storage.get_all_products()
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –ë–î: {e}")
                return export_files
            
            if not all_products:
                self.logger.warning("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return export_files
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            try:
                csv_file = f"data/out/products_{user_id}.csv"
                success = scraper.storage.export_to_csv(csv_file, all_products)
                if success:
                    export_files['csv'] = csv_file
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSONL
            try:
                jsonl_file = f"data/out/products_{user_id}.jsonl"
                success = scraper.storage.export_to_jsonl(jsonl_file, all_products)
                if success:
                    export_files['jsonl'] = jsonl_file
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSONL: {e}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ SQLite
            try:
                sqlite_file = f"data/out/products_{user_id}.db"
                success = scraper.storage.export_to_sqlite(sqlite_file, all_products)
                if success:
                    export_files['sqlite'] = sqlite_file
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ SQLite: {e}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
        return export_files
        
    async def _send_results(self, update, context, export_files, task_info):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        results_text = f"""
‚úÖ *–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!*

üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(task_info['sources'])}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(task_info['categories']) if task_info['categories'] else '–í—Å–µ'}
‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {int(asyncio.get_event_loop().time() - task_info['start_time'])} —Å–µ–∫

üìÅ *–§–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:*
        """
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback)
        if hasattr(update, 'message'):
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = update.message
            chat_id = update.effective_chat.id
        else:
            # Callback
            message = update
            chat_id = message.chat.id if hasattr(message, 'chat') else None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.reply_text(results_text, parse_mode='Markdown')
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ context.bot
            if chat_id:
                await context.bot.send_message(chat_id=chat_id, text=results_text, parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        for format_name, file_path in export_files.items():
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'rb') as f:
                        await context.bot.send_document(
                            chat_id=chat_id or (message.chat.id if hasattr(message, 'chat') else None),
                            document=f,
                            filename=f"products_{format_name}.{format_name}",
                            caption=f"üìÅ –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_name.upper()}"
                        )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    try:
                        await message.reply_text(f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {format_name}:* {str(e)}")
                    except:
                        if chat_id:
                            await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {format_name}: {str(e)}")
                    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            
        text = update.message.text.lower()
        
        if any(word in text for word in ['–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞']):
            await self.help_command(update, context)
        elif any(word in text for word in ['—Å—Ç–∞—Ç—É—Å', 'status']):
            await self.status_command(update, context)
        elif any(word in text for word in ['–≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏', '–≤—Å–µ', 'all sources']):
            await self.scrape_all_command(update, context)
        elif any(word in text for word in ['—Ç–µ—Å—Ç —Å–∞–º–æ–∫–∞—Ç', 'test samokat']):
            await self.test_samokat_command(update, context)
        elif any(word in text for word in ['—Ç–µ—Å—Ç –ª–∞–≤–∫–∞', 'test lavka']):
            await self.test_lavka_command(update, context)
        elif any(word in text for word in ['—Ç–µ—Å—Ç –≤–∫—É—Å–≤–∏–ª–ª', 'test vkusvill']):
            await self.test_vkusvill_command(update, context)
        elif any(word in text for word in ['–ø–∞—Ä—Å–∏–Ω–≥', 'scrape', '–∑–∞–ø—É—Å–∫']):
            await self.scrape_command(update, context)
        else:
            await update.message.reply_text(
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
            
        
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        max_retries = 3
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                await self.application.initialize()
                await self.application.start()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º updater —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
                await self.application.updater.start_polling(
                    timeout=120,  # 120 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                    drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    allowed_updates=["message", "callback_query"],  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                    bootstrap_retries=3,  # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
                    read_timeout=120,  # –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è
                    write_timeout=120   # –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Å–∏
                )
                
                self.logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                
                # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
                try:
                    await asyncio.Event().wait()
                except KeyboardInterrupt:
                    self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break  # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                
            except Exception as e:
                retry_count += 1
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}): {e}")
                
                if retry_count < max_retries:
                    self.logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(5)
                else:
                    self.logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞")
                    raise
            finally:
                try:
                    await self.application.updater.stop()
                    await self.application.stop()
                    await self.application.shutdown()
                except:
                    pass
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        asyncio.create_task(self.application.shutdown())
