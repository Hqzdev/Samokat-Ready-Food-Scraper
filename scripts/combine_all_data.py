#!/usr/bin/env python3
"""–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç–æ—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª."""

import pandas as pd
from pathlib import Path


def combine_all_data():
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("üîÑ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –í–°–ï–• –ù–ê–°–¢–û–Ø–©–ò–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –§–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    files = [
        ("data/FINAL_real_foods.csv", "–í–∫—É—Å–í–∏–ª–ª (275 —Ç–æ–≤–∞—Ä–æ–≤)"),
        ("data/FINAL_working.csv", "–°–∞–º–æ–∫–∞—Ç (29 —Ç–æ–≤–∞—Ä–æ–≤)")
    ]
    
    all_data = []
    
    for file_path, description in files:
        if Path(file_path).exists():
            try:
                df = pd.read_csv(file_path)
                print(f"‚úÖ {description}: {len(df)} —Ç–æ–≤–∞—Ä–æ–≤")
                all_data.append(df)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    
    if not all_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
        return False
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    combined_df = pd.concat(all_data, ignore_index=True)
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ URL
    before_dedup = len(combined_df)
    combined_df = combined_df.drop_duplicates(subset=['url'], keep='first')
    after_dedup = len(combined_df)
    
    print(f"üîÑ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {before_dedup - after_dedup}")
    print(f"üìä –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {after_dedup}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    quality_df = combined_df[
        (combined_df['name'].notna()) &
        (combined_df['name'].str.len() > 3) &
        (combined_df['price'] > 0) &
        (combined_df['url'].notna())
    ].copy()
    
    print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(quality_df)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
    output_file = "data/COMPLETE_real_foods.csv"
    quality_df.to_csv(output_file, index=False, encoding='utf-8')
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_file}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    shop_stats = quality_df['shop'].value_counts()
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú:")
    for shop, count in shop_stats.items():
        print(f"   {shop.upper()}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_stats = quality_df['category'].value_counts()
    print(f"\nüè∑Ô∏è –¢–û–ü –ö–ê–¢–ï–ì–û–†–ò–ò:")
    for category, count in category_stats.head(5).items():
        print(f"   {category}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –¶–µ–Ω–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüí∞ –¶–ï–ù–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {quality_df['price'].mean():.1f} —Ä—É–±")
    print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {quality_df['price'].min():.1f} —Ä—É–±")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {quality_df['price'].max():.1f} —Ä—É–±")
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
    print(f"\nüìã –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í:")
    for i, row in quality_df.head(10).iterrows():
        print(f"{i+1}. {row['name']} ({row['shop'].upper()})")
        print(f"   üí∞ {row['price']} —Ä—É–±")
        if pd.notna(row['portion_g']):
            print(f"   ‚öñÔ∏è {row['portion_g']}–≥")
        print()
    
    return len(quality_df)


if __name__ == "__main__":
    print("üéØ –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï –í–°–ï–• –ù–ê–°–¢–û–Ø–©–ò–• –î–ê–ù–ù–´–•")
    print("üìã –í–∫—É—Å–í–∏–ª–ª + –°–∞–º–æ–∫–∞—Ç = –ü–û–õ–ù–ê–Ø –ë–ê–ó–ê")
    
    count = combine_all_data()
    
    if count > 0:
        print(f"\nüéâ –ì–û–¢–û–í–û! {count} –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –µ–¥–∏–Ω–æ–º —Ñ–∞–π–ª–µ!")
        print("üìÑ –§–∞–π–ª: data/COMPLETE_real_foods.csv")
        print("\n‚ú® –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è –±–∞–∑–∞ –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã!")
        print("üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ production!")
    else:
        print("\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        exit(1)
