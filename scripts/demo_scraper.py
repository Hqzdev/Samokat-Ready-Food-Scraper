#!/usr/bin/env python3
"""–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–µ–π–ø–µ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""

import asyncio
import random
from decimal import Decimal
from datetime import datetime
from typing import List

from app.models import ScrapingConfig, ScrapingResult, FoodItem
from app.utils.storage import DataExporter
from app.utils.logger import setup_logger


async def create_demo_data(shop: str, count: int = 50) -> List[FoodItem]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥
    dishes = {
        'samokat': [
            '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π', '–ë–æ—Ä—â —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π', '–°—É–ø-–ø—é—Ä–µ –∏–∑ —Ç—ã–∫–≤—ã',
            '–ü–∞—Å—Ç–∞ –ö–∞—Ä–±–æ–Ω–∞—Ä–∞', '–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç', '–¢–æ–º –Ø–º —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏',
            '–†–∏–∑–æ—Ç—Ç–æ —Å –≥—Ä–∏–±–∞–º–∏', '–ö–æ—Ç–ª–µ—Ç—ã –ø–æ-–∫–∏–µ–≤—Å–∫–∏', '–õ–∞–∑–∞–Ω—å—è –º—è—Å–Ω–∞—è',
            '–°—É–ø —Å–æ–ª—è–Ω–∫–∞ —Å–±–æ—Ä–Ω–∞—è', '–°–∞–ª–∞—Ç –û–ª–∏–≤—å–µ', '–ü–ª–æ–≤ —É–∑–±–µ–∫—Å–∫–∏–π'
        ],
        'lavka': [
            '–†–æ–ª–ª—ã –§–∏–ª–∞–¥–µ–ª—å—Ñ–∏—è', '–°—É—à–∏ —Å–µ—Ç', '–†–∞–º–µ–Ω —Å –º—è—Å–æ–º', '–§–æ –ë–æ',
            '–°–∞–ª–∞—Ç —Å –∫–∏–Ω–æ–∞', '–ü–æ–∫–µ –±–æ—É–ª —Å –ª–æ—Å–æ—Å–µ–º', '–ë—É—Ä—Ä–∏—Ç–æ —Å –∫—É—Ä–∏—Ü–µ–π',
            '–ì–∞—Å–ø–∞—á–æ', '–ö—Ä–µ–º-—Å—É–ø –∏–∑ –±—Ä–æ–∫–∫–æ–ª–∏', '–¢–∞—Ä—Ç–∞—Ä –∏–∑ —Ç—É–Ω—Ü–∞'
        ],
        'vkusvill': [
            '–ö–∞—à–∞ –æ–≤—Å—è–Ω–∞—è —Å —è–≥–æ–¥–∞–º–∏', '–°–º—É–∑–∏ –±–æ—É–ª', '–°–∞–ª–∞—Ç —Å –∞–≤–æ–∫–∞–¥–æ',
            '–ö–∏–Ω–æ–∞ —Å –æ–≤–æ—â–∞–º–∏', '–ß–∏–∞ –ø—É–¥–∏–Ω–≥', '–í–µ–≥–∞–Ω –±—É—Ä–≥–µ—Ä',
            '–•—É–º—É—Å —Å –æ–≤–æ—â–∞–º–∏', '–ì—Ä–µ—á–∫–∞ —Å –≥—Ä–∏–±–∞–º–∏', '–û–≤–æ—â–Ω–æ–µ —Ä–∞–≥—É'
        ]
    }
    
    categories = [
        '–≥–æ—Ç–æ–≤–∞—è –µ–¥–∞/—Å–∞–ª–∞—Ç—ã', '–≥–æ—Ç–æ–≤–∞—è –µ–¥–∞/—Å—É–ø—ã', '–≥–æ—Ç–æ–≤–∞—è –µ–¥–∞/–≥–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞',
        '–≥–æ—Ç–æ–≤–∞—è –µ–¥–∞/–∑–∞–∫—É—Å–∫–∏', '–≥–æ—Ç–æ–≤–∞—è –µ–¥–∞/–¥–µ—Å–µ—Ä—Ç—ã', '–≥–æ—Ç–æ–≤–∞—è –µ–¥–∞/–∫—É–ª–∏–Ω–∞—Ä–∏—è'
    ]
    
    tags_options = [
        ['–æ—Å—Ç—Ä–æ–µ', '–∞–∑–∏–∞—Ç—Å–∫–∞—è –∫—É—Ö–Ω—è'], ['–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ', '–ø–æ–ª–µ–∑–Ω–æ'],
        ['—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ', '–¥–æ–º–∞—à–Ω–µ–µ'], ['–¥–∏–µ—Ç–∏—á–µ—Å–∫–æ–µ', '–ø–ø'],
        ['–±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞', '–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–µ'], ['–≤–µ–≥–∞–Ω', '—ç–∫–æ']
    ]
    
    items = []
    shop_dishes = dishes.get(shop, dishes['samokat'])
    
    for i in range(count):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        name = random.choice(shop_dishes)
        if i > 0:  # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏
            name += f" {random.choice(['–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '–¥–æ–º–∞—à–Ω–∏–π', '–∞–≤—Ç–æ—Ä—Å–∫–∏–π', '—Ñ–∏—Ä–º–µ–Ω–Ω—ã–π'])}"
        
        price = Decimal(str(random.randint(150, 800)))
        portion_g = Decimal(str(random.randint(200, 500)))
        
        # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ë–ñ–£
        kcal_100g = Decimal(str(random.randint(80, 300)))
        protein_100g = Decimal(str(round(random.uniform(5, 25), 1)))
        fat_100g = Decimal(str(round(random.uniform(2, 20), 1)))
        carb_100g = Decimal(str(round(random.uniform(10, 50), 1)))
        
        item = FoodItem(
            id=f"{shop}:demo_{i+1:03d}",
            name=name,
            category=random.choice(categories),
            price=price,
            shop=shop,
            url=f"https://{shop}.ru/product/demo_{i+1:03d}",
            photo_url=f"https://{shop}.ru/images/demo_{i+1:03d}.jpg",
            kcal_100g=kcal_100g,
            protein_100g=protein_100g,
            fat_100g=fat_100g,
            carb_100g=carb_100g,
            portion_g=portion_g,
            tags=random.choice(tags_options),
            composition=f"–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –±–ª—é–¥–∞ {name.lower()}",
            city="–ú–æ—Å–∫–≤–∞",
            address="–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1",
            price_per_100g=price * 100 / portion_g
        )
        
        items.append(item)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞
        await asyncio.sleep(0.1)
    
    return items


async def demo_scraping():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞."""
    setup_logger(level="INFO")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞...")
    print("=" * 60)
    
    shops = ['samokat', 'lavka', 'vkusvill']
    results = []
    
    for shop in shops:
        print(f"\nüì¶ –°–∫—Ä–µ–π–ø–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–∞: {shop.upper()}")
        print("-" * 40)
        
        start_time = asyncio.get_event_loop().time()
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        items = await create_demo_data(shop, count=random.randint(30, 60))
        
        duration = asyncio.get_event_loop().time() - start_time
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = ScrapingResult(
            shop=shop,
            items=items,
            total_found=len(items),
            successful=len(items),
            failed=0,
            errors=[],
            duration_seconds=duration
        )
        
        results.append(result)
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result.total_found}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {result.successful}")
        print(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.duration_seconds:.1f} —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
        complete_nutrients = sum(1 for item in items if item.has_complete_nutrients())
        completeness = complete_nutrients / len(items) if items else 0
        print(f"‚úÖ –ü–æ–ª–Ω–æ—Ç–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤: {completeness:.1%} ({complete_nutrients}/{len(items)})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {shop}:")
        for item in items[:3]:
            print(f"  ‚Ä¢ {item.name}")
            print(f"    –¶–µ–Ω–∞: {item.price} —Ä—É–±, –í–µ—Å: {item.portion_g}–≥")
            print(f"    –ö–ë–ñ–£: {item.kcal_100g}–∫–∫–∞–ª, –ë{item.protein_100g}–≥, –ñ{item.fat_100g}–≥, –£{item.carb_100g}–≥")
            print(f"    –¢–µ–≥–∏: {', '.join(item.tags)}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
    print("-" * 40)
    
    exporter = DataExporter("data")
    exported_files = exporter.export_results(
        results,
        filename_prefix="demo_foods",
        formats=["csv", "json", "parquet"]
    )
    
    print("‚úÖ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
    for format_name, file_path in exported_files.items():
        print(f"  üìÑ {format_name.upper()}: {file_path}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_items = sum(result.successful for result in results)
    total_duration = sum(result.duration_seconds for result in results)
    
    print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print("-" * 40)
    print(f"‚úÖ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_items}")
    print(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_duration:.1f} —Å–µ–∫")
    print(f"‚úÖ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {total_items / total_duration:.1f} —Ç–æ–≤–∞—Ä–æ–≤/—Å–µ–∫")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    all_items = []
    for result in results:
        all_items.extend(result.items)
    
    category_stats = {}
    for item in all_items:
        if item.category not in category_stats:
            category_stats[item.category] = {'count': 0, 'avg_price': 0, 'prices': []}
        category_stats[item.category]['count'] += 1
        category_stats[item.category]['prices'].append(float(item.price))
    
    for category, stats in category_stats.items():
        if stats['prices']:
            stats['avg_price'] = sum(stats['prices']) / len(stats['prices'])
    
    print(f"\nüè∑Ô∏è –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
    sorted_categories = sorted(category_stats.items(), key=lambda x: x[1]['count'], reverse=True)
    for category, stats in sorted_categories[:5]:
        print(f"  ‚Ä¢ {category}: {stats['count']} —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats['avg_price']:.0f} —Ä—É–±)")
    
    print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ 'data/'")


if __name__ == "__main__":
    asyncio.run(demo_scraping())
