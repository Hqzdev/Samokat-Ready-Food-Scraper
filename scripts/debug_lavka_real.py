#!/usr/bin/env python3
"""–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""

import asyncio
from playwright.async_api import async_playwright
from app.utils.logger import setup_logger


async def debug_lavka():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–æ–π."""
    setup_logger(level="INFO")
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –Ø–ù–î–ï–ö–° –õ–ê–í–ö–ò")
    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å, —Å–µ–ª–µ–∫—Ç–æ—Ä—ã")
    print("=" * 50)
    
    playwright = await async_playwright().start()
    browser = await playwright.firefox.launch(
        headless=False,
        firefox_user_prefs={
            "dom.webdriver.enabled": False,
            "useAutomationExtension": False
        }
    )
    
    context = await browser.new_context(
        user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/119.0",
        locale='ru-RU',
        timezone_id='Europe/Moscow'
    )
    
    page = await context.new_page()
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("\nüìÑ –ü–†–û–í–ï–†–ö–ê –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´")
        print("-" * 30)
        
        await page.goto("https://lavka.yandex.ru", wait_until="domcontentloaded", timeout=60000)
        title = await page.title()
        print(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
        
        if "—Ä–æ–±–æ—Ç" in title.lower() or "captcha" in title.lower():
            print("üõ°Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ö–ê–ü–ß–ê –Ω–∞ –≥–ª–∞–≤–Ω–æ–π!")
            print("üë§ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –ö–ê–ü–ß–ò:")
            print("   1. –í –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞–∂–º–∏—Ç–µ '–Ø –Ω–µ —Ä–æ–±–æ—Ç'")
            print("   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è")
            print("   3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É
            print("\n‚è∞ –£ –≤–∞—Å –µ—Å—Ç—å 90 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏...")
            for i in range(90, 0, -10):
                print(f"   ‚è∞ –û—Å—Ç–∞–ª–æ—Å—å {i} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(10)
                
                try:
                    current_title = await page.title()
                    current_url = page.url
                    print(f"      üìÑ –¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {current_title[:50]}...")
                    
                    if "—Ä–æ–±–æ—Ç" not in current_title.lower() and "captcha" not in current_title.lower():
                        print("‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")
                        break
                except:
                    pass
            else:
                print("‚ùå –ö–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –∑–∞ 90 —Å–µ–∫—É–Ω–¥")
                return False
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã
        print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò –ì–û–¢–û–í–û–ô –ï–î–´")
        print("-" * 30)
        
        category_url = "https://lavka.yandex.ru/category/gotovaya_eda"
        print(f"üîó URL: {category_url}")
        
        await page.goto(category_url, wait_until="domcontentloaded", timeout=60000)
        await asyncio.sleep(5)
        
        cat_title = await page.title()
        print(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cat_title}")
        
        if "—Ä–æ–±–æ—Ç" in cat_title.lower():
            print("üõ°Ô∏è –ö–ê–ü–ß–ê –ù–ê –°–¢–†–ê–ù–ò–¶–ï –ö–ê–¢–ï–ì–û–†–ò–ò!")
            return False
        
        # 3. –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        print("\n‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –¢–û–í–ê–†–û–í")
        print("-" * 30)
        
        print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ (15 —Å–µ–∫)...")
        await asyncio.sleep(15)
        
        page_content = await page.content()
        content_length = len(page_content)
        print(f"üìÑ –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {content_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = ['—Ç–æ–≤–∞—Ä', 'product', '—Ü–µ–Ω–∞', 'price', '–∫–∞—Ä—Ç–æ—á–∫–∞', 'card', '–≥–æ—Ç–æ–≤–∞—è', '–±–ª—é–¥–æ']
        for keyword in keywords:
            count = page_content.lower().count(keyword)
            print(f"üîç '{keyword}': {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        # 4. –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        print("\nüîÑ –ü–†–û–ö–†–£–¢–ö–ê –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –¢–û–í–ê–†–û–í")
        print("-" * 30)
        
        print("üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        for i in range(10):
            await page.mouse.wheel(0, 3000)
            await asyncio.sleep(1)
            print(f"   –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {i+1}/10")
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–õ–ï–ö–¢–û–†–û–í –ü–û–°–õ–ï –ü–†–û–ö–†–£–¢–ö–ò")
        print("-" * 30)
        
        selectors = [
            '[data-testid*="product"]',
            '[data-testid*="item"]', 
            '[data-testid*="card"]',
            '[class*="Product"]',
            '[class*="Card"]',
            '[class*="Item"]',
            '[class*="Tile"]',
            '[class*="product"]',
            'a[href*="/product/"]',
            'a[href*="/goods/"]',
            '.product',
            '.item',
            'article',
            'section',
            'div[role="listitem"]',
            'li'
        ]
        
        max_elements = 0
        best_selector = ""
        
        for selector in selectors:
            try:
                elements = await page.locator(selector).all()
                count = len(elements)
                print(f"   {selector}: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                if count > max_elements:
                    max_elements = count
                    best_selector = selector
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if elements:
                        print(f"      üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
                        for i, el in enumerate(elements[:3]):
                            try:
                                text = await el.inner_text()
                                if text and len(text.strip()) > 5:
                                    print(f"         {i+1}. {text[:60]}...")
                                    
                                    # –ò—â–µ–º —Ü–µ–Ω—É –≤ —Ç–µ–∫—Å—Ç–µ
                                    import re
                                    price_match = re.search(r'(\d+)\s*‚ÇΩ', text)
                                    if price_match:
                                        print(f"            üí∞ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞: {price_match.group(1)}‚ÇΩ")
                                else:
                                    print(f"         {i+1}. [–ü—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç]")
                            except:
                                print(f"         {i+1}. [–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞]")
                            
            except Exception as e:
                print(f"   {selector}: –û–®–ò–ë–ö–ê - {e}")
        
        # 6. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        print("-" * 30)
        
        if max_elements > 0:
            print(f"‚úÖ –¢–û–í–ê–†–´ –ù–ê–ô–î–ï–ù–´: {max_elements} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            print(f"üéØ –õ—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä: {best_selector}")
            print("üí° –õ–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞!")
            return True
        else:
            print("‚ùå –¢–û–í–ê–†–´ –ù–ï –ù–ê–ô–î–ï–ù–´")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
            print("   - –¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
            print("   - –¢—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è")
            return False
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        # –ñ–¥–µ–º –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞
        print("\nüëÄ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Å–º–æ—Ç—Ä (15 —Å–µ–∫)...")
        await asyncio.sleep(15)
        
        await page.close()
        await context.close()
        await browser.close()
        await playwright.stop()


if __name__ == "__main__":
    print("üîç –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –Ø–ù–î–ï–ö–° –õ–ê–í–ö–ò")
    print("üõ°Ô∏è –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É –≤—Ä—É—á–Ω—É—é!")
    
    success = asyncio.run(debug_lavka())
    
    if success:
        print("\nüéâ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –õ–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!")
        print("üí° –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")
    else:
        print("\nüí• –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: –õ–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –í–∫—É—Å–í–∏–ª–ª (275 —Ç–æ–≤–∞—Ä–æ–≤ —É–∂–µ —Å–æ–±—Ä–∞–Ω–æ)")
