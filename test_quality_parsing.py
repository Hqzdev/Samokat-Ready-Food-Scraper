#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 500 —Ç–æ–≤–∞—Ä–æ–≤ —Å –°–∞–º–æ–∫–∞—Ç–∞ –∏ –õ–∞–≤–∫–∏
"""
import asyncio
import time
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.main import FoodScraper, load_config

async def test_quality_parsing():
    """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("üöÄ –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 500 —Ç–æ–≤–∞—Ä–æ–≤ —Å –°–∞–º–æ–∫–∞—Ç–∞ –∏ –õ–∞–≤–∫–∏...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config('config.yaml')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    config['limit'] = 500  # 500 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    config['fast_mode'] = False  # –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    config['headless'] = True  # –°–∫—Ä—ã—Ç—ã–π –±—Ä–∞—É–∑–µ—Ä
    config['max_concurrent'] = 3  # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å
    config['throttle_min'] = 0.1  # –ó–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    config['throttle_max'] = 0.3
    config['sources'] = ['samokat', 'lavka']  # –¢–æ–ª—å–∫–æ –°–∞–º–æ–∫–∞—Ç –∏ –õ–∞–≤–∫–∞
    
    print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   ‚Ä¢ –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫: {config['limit']}")
    print(f"   ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {config['sources']}")
    print(f"   ‚Ä¢ –û–∂–∏–¥–∞–µ–º–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(config['sources']) * config['limit']}")
    print(f"   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {config['fast_mode']}")
    print(f"   ‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: {config['max_concurrent']}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–µ–π–ø–µ—Ä
    scraper = FoodScraper(config)
    
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        print("\nüîç –ù–∞—á–∏–Ω–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...")
        all_products = await scraper.scrape_all()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_products = 0
        quality_products = 0
        for shop_name, products in all_products.items():
            count = len(products)
            total_products += count
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            quality_count = 0
            for product in products:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –º—É—Å–æ—Ä
                if (product.name and 
                    len(product.name.strip()) > 5 and 
                    not any(spam in product.name.lower() for spam in ['–∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å', '—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', '–æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç']) and
                    product.price and product.price > 0):
                    quality_count += 1
            
            print(f"‚úÖ {shop_name}: {count} —Ç–æ–≤–∞—Ä–æ–≤ (–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {quality_count})")
            quality_products += quality_count
        
        duration = time.time() - start_time
        
        print(f"\nüéâ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
        print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {quality_products}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞: {(quality_products/total_products*100):.1f}%")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫")
        print(f"   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {total_products/duration:.1f} —Ç–æ–≤–∞—Ä–æ–≤/—Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã —Ü–µ–ª–∏
        expected_total = len(config['sources']) * config['limit']
        if total_products >= expected_total:
            print(f"‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_total}, –ø–æ–ª—É—á–µ–Ω–æ: {total_products}")
        else:
            print(f"‚ö†Ô∏è  –¶–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_total}, –ø–æ–ª—É—á–µ–Ω–æ: {total_products}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        if quality_products >= total_products * 0.8:  # 80% –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–ª–∏—á–Ω–æ–µ! {quality_products} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {total_products}")
        else:
            print(f"‚ö†Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è. {quality_products} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {total_products}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if total_products > 0:
            print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {total_products} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î...")
            saved_count = await scraper.save_products(all_products)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved_count}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV
            output_file = f"data/out/quality_products_{int(time.time())}.csv"
            print(f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ {output_file}...")
            export_success = await scraper.export_data(output_file, all_products)
            if export_success:
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {output_file}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if os.path.exists(output_file):
                    file_size = os.path.getsize(output_file)
                    print(f"üìè –†–∞–∑–º–µ—Ä CSV —Ñ–∞–π–ª–∞: {file_size / 1024:.1f} KB")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        return total_products >= expected_total and quality_products >= total_products * 0.8
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
    print("=" * 50)
    
    try:
        success = asyncio.run(test_quality_parsing())
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            sys.exit(0)
        else:
            print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
