#!/usr/bin/env python3
"""
üîç –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–ò –î–ê–ù–ù–´–• –ü–û –ê–î–†–ï–°–£
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–æ–≤–∞—Ä—ã –∏–∑ CSV —Ñ–∞–π–ª–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.
"""

import asyncio
import csv
import sys
import random
from pathlib import Path
from typing import List, Dict
from urllib.parse import urljoin

try:
    from selectolax.parser import HTMLParser
except ImportError:
    HTMLParser = None

import httpx


class AddressVerifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–¥—Ä–µ—Å—É."""
    
    def __init__(self):
        self.BASE_URL = "https://vkusvill.ru"
        
    async def verify_csv_file(self, csv_file: str, address: str, sample_size: int = 10):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ CSV —Ñ–∞–π–ª–∞ - –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ —Ç–æ–≤–∞—Ä—ã –ø–æ –∞–¥—Ä–µ—Å—É."""
        print(f"üîç –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–ò –î–ê–ù–ù–´–•")
        print("=" * 50)
        print(f"üìä –§–∞–π–ª: {csv_file}")
        print(f"üìç –ê–¥—Ä–µ—Å: {address}")
        print(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É: {sample_size} —Ç–æ–≤–∞—Ä–æ–≤")
        print()
        
        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
        if not Path(csv_file).exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}")
            return
            
        products = []
        try:
            with open(csv_file, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                products = list(reader)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return
            
        print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {len(products)}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É
        sample_products = random.sample(products, min(sample_size, len(products)))
        print(f"üé≤ –í—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(sample_products)} —Ç–æ–≤–∞—Ä–æ–≤")
        print()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        await self._set_location_for_verification(address)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
        available_count = 0
        unavailable_count = 0
        error_count = 0
        
        for i, product in enumerate(sample_products, 1):
            product_id = product.get('id', '')
            product_name = product.get('name', '')[:50]
            product_url = product.get('url', '')
            
            print(f"üîç {i}/{len(sample_products)} –ü—Ä–æ–≤–µ—Ä—è–µ–º: {product_name}...")
            
            try:
                is_available = await self._check_product_availability(product_url, product_id)
                
                if is_available:
                    available_count += 1
                    print(f"   ‚úÖ –î–û–°–¢–£–ü–ï–ù –ø–æ –∞–¥—Ä–µ—Å—É")
                else:
                    unavailable_count += 1
                    print(f"   ‚ùå –ù–ï –î–û–°–¢–£–ü–ï–ù –ø–æ –∞–¥—Ä–µ—Å—É")
                    
            except Exception as e:
                error_count += 1
                print(f"   ‚ö†Ô∏è –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò: {e}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            await asyncio.sleep(1)
            print()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
        print("=" * 30)
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: {available_count} ({available_count/len(sample_products)*100:.1f}%)")
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {unavailable_count} ({unavailable_count/len(sample_products)*100:.1f}%)")
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {error_count} ({error_count/len(sample_products)*100:.1f}%)")
        print()
        
        if available_count / len(sample_products) >= 0.8:
            print("üéâ –î–ê–ù–ù–´–ï –ö–û–†–†–ï–ö–¢–ù–´ - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É!")
        elif available_count / len(sample_products) >= 0.5:
            print("‚ö†Ô∏è –î–ê–ù–ù–´–ï –ß–ê–°–¢–ò–ß–ù–û –ö–û–†–†–ï–ö–¢–ù–´ - –æ–∫–æ–ª–æ –ø–æ–ª–æ–≤–∏–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            print("‚ùå –î–ê–ù–ù–´–ï –ù–ï–ö–û–†–†–ï–ö–¢–ù–´ - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É")
    
    async def _set_location_for_verification(self, address: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            if ',' in address and len(address.split(',')) == 2:
                # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
                coords = address
                city = "–ú–æ—Å–∫–≤–∞"
            else:
                # –ê–¥—Ä–µ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–æ—Å–∫–≤—É
                coords = "55.7558,37.6176"
                city = "–ú–æ—Å–∫–≤–∞"
            
            lat, lon = coords.split(',')
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            }
            
            async with httpx.AsyncClient(timeout=30, headers=headers) as client:
                location_url = f"{self.BASE_URL}/api/location?city={city}&lat={lat.strip()}&lon={lon.strip()}"
                await client.get(location_url)
                print(f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {address}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
    
    async def _check_product_availability(self, product_url: str, product_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É."""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            }
            
            async with httpx.AsyncClient(timeout=30, headers=headers) as client:
                response = await client.get(product_url)
                
                if response.status_code != 200:
                    return False
                
                if not HTMLParser:
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
                    return "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" not in response.text.lower() and "–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏" not in response.text.lower()
                
                parser = HTMLParser(response.text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–í –∫–æ—Ä–∑–∏–Ω—É" –∏–ª–∏ —Ü–µ–Ω—ã
                buy_buttons = parser.css('.buy-button, [data-testid*="buy"], .add-to-cart, .price')
                if buy_buttons:
                    return True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                unavailable_indicators = [
                    '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', '–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏', '–∑–∞–∫–æ–Ω—á–∏–ª—Å—è', 
                    '–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'out of stock'
                ]
                
                page_text = response.text.lower()
                for indicator in unavailable_indicators:
                    if indicator in page_text:
                        return False
                
                return True
                
        except Exception:
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    if len(sys.argv) < 3:
        print("üîç –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–ò –î–ê–ù–ù–´–• –ü–û –ê–î–†–ï–°–£")
        print("=" * 50)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 verify_address_data.py —Ñ–∞–π–ª.csv \"–ê–¥—Ä–µ—Å\" [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø—Ä–æ–≤–µ—Ä–æ–∫]")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python3 verify_address_data.py data/address_fast_123.csv \"–ú–æ—Å–∫–≤–∞, –ê—Ä–±–∞—Ç, 15\" 5")
        print("  python3 verify_address_data.py data/address_fast_123.csv \"55.7558,37.6176\" 10")
        print("  python3 verify_address_data.py data/address_fast_123.csv \"–°–ü–±, –ù–µ–≤—Å–∫–∏–π, 1\"")
        return
    
    csv_file = sys.argv[1]
    address = sys.argv[2]
    sample_size = int(sys.argv[3]) if len(sys.argv) > 3 else 10
    
    verifier = AddressVerifier()
    await verifier.verify_csv_file(csv_file, address, sample_size)


if __name__ == "__main__":
    asyncio.run(main())
