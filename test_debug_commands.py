#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""
import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.main import load_config
from src.sources.samokat import SamokatScraper
from src.sources.lavka import LavkaScraper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('debug_test.log')
    ]
)

async def test_samokat_scraper():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –°–∞–º–æ–∫–∞—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –°–∞–º–æ–∫–∞—Ç–∞...")
    
    config = {
        'city': '–ú–æ—Å–∫–≤–∞',
        'headless': False,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        'limit': 10
    }
    
    scraper = SamokatScraper(config)
    
    try:
        async with scraper:
            print("‚úÖ –°–∫—Ä–µ–π–ø–µ—Ä –°–∞–º–æ–∫–∞—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = await scraper.get_categories()
            print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –°–∞–º–æ–∫–∞—Ç–∞: {categories}")
            
            if categories:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                test_category = categories[0]
                print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {test_category}")
                
                products = await scraper.scrape_category(test_category, 5)
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                for i, product in enumerate(products[:3], 1):
                    print(f"  {i}. {product.name} - {product.price} —Ä—É–±.")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ –°–∞–º–æ–∫–∞—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

async def test_lavka_scraper():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∏...")
    
    config = {
        'city': '–ú–æ—Å–∫–≤–∞',
        'headless': False,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        'limit': 10
    }
    
    scraper = LavkaScraper(config)
    
    try:
        async with scraper:
            print("‚úÖ –°–∫—Ä–µ–π–ø–µ—Ä –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = await scraper.get_categories()
            print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∏: {categories}")
            
            if categories:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                test_category = categories[0]
                print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {test_category}")
                
                products = await scraper.scrape_category(test_category, 5)
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                for i, product in enumerate(products[:3], 1):
                    print(f"  {i}. {product.name} - {product.price} —Ä—É–±.")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫–∏: {e}")
        import traceback
        traceback.print_exc()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –°–∞–º–æ–∫–∞—Ç
    await test_samokat_scraper()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ø–Ω–¥–µ–∫—Å –õ–∞–≤–∫—É
    await test_lavka_scraper()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
