#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–æ–≤ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –í–∫—É—Å–í–∏–ª–ª–∞
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.sources.samokat import SamokatScraper
from src.sources.vkusvill import VkusvillScraper

async def test_samokat():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –°–∞–º–æ–∫–∞—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –°–∞–º–æ–∫–∞—Ç–∞...")
    
    config = {
        'city': '–ú–æ—Å–∫–≤–∞',
        'headless': True,
        'max_concurrent': 1,
        'throttle_min': 0.1,
        'throttle_max': 0.3
    }
    
    scraper = SamokatScraper(config)
    
    try:
        async with scraper:
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = await scraper.get_categories()
            print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories[:3]}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            test_category = categories[0] if categories else '–í—Å—è –≥–æ—Ç–æ–≤–∞—è –µ–¥–∞'
            print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {test_category}")
            
            products = await scraper.scrape_category(test_category, limit=5)
            print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            for i, product in enumerate(products[:3], 1):
                print(f"\nüì¶ –¢–æ–≤–∞—Ä {i}:")
                print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}")
                print(f"  –¶–µ–Ω–∞: {product.price} —Ä—É–±.")
                print(f"  URL: {product.url[:50]}..." if product.url else "  URL: –Ω–µ —É–∫–∞–∑–∞–Ω")
                print(f"  –°–æ—Å—Ç–∞–≤: {product.composition[:100]}..." if product.composition else "  –°–æ—Å—Ç–∞–≤: –Ω–µ —É–∫–∞–∑–∞–Ω")
                print(f"  –ü–æ—Ä—Ü–∏—è: {product.portion_g}–≥" if product.portion_g else "  –ü–æ—Ä—Ü–∏—è: –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                print(f"  –ö–∞–ª–æ—Ä–∏–∏: {product.kcal_100g} –∫–∫–∞–ª/100–≥" if product.kcal_100g else "  –ö–∞–ª–æ—Ä–∏–∏: –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
                print(f"  –ë–µ–ª–∫–∏: {product.protein_100g}–≥/100–≥" if product.protein_100g else "  –ë–µ–ª–∫–∏: –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
                print(f"  –ñ–∏—Ä—ã: {product.fat_100g}–≥/100–≥" if product.fat_100g else "  –ñ–∏—Ä—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
                print(f"  –£–≥–ª–µ–≤–æ–¥—ã: {product.carb_100g}–≥/100–≥" if product.carb_100g else "  –£–≥–ª–µ–≤–æ–¥—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            
            return len(products) > 0
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–∞–º–æ–∫–∞—Ç–∞: {e}")
        return False

async def test_vkusvill():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –í–∫—É—Å–í–∏–ª–ª–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –í–∫—É—Å–í–∏–ª–ª–∞...")
    
    config = {
        'city': '–ú–æ—Å–∫–≤–∞',
        'headless': True,
        'max_concurrent': 1,
        'throttle_min': 0.1,
        'throttle_max': 0.3
    }
    
    scraper = VkusvillScraper(config)
    
    try:
        async with scraper:
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = await scraper.get_categories()
            print(f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories[:3]}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            test_category = categories[0] if categories else '–•–∞–± ¬´–ì–æ—Ç–æ–≤–∞—è –µ–¥–∞¬ª'
            print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {test_category}")
            
            products = await scraper.scrape_category(test_category, limit=5)
            print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            for i, product in enumerate(products[:3], 1):
                print(f"\nüì¶ –¢–æ–≤–∞—Ä {i}:")
                print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}")
                print(f"  –¶–µ–Ω–∞: {product.price} —Ä—É–±.")
                print(f"  URL: {product.url[:50]}..." if product.url else "  URL: –Ω–µ —É–∫–∞–∑–∞–Ω")
                print(f"  –°–æ—Å—Ç–∞–≤: {product.composition[:100]}..." if product.composition else "  –°–æ—Å—Ç–∞–≤: –Ω–µ —É–∫–∞–∑–∞–Ω")
                print(f"  –ü–æ—Ä—Ü–∏—è: {product.portion_g}–≥" if product.portion_g else "  –ü–æ—Ä—Ü–∏—è: –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
                print(f"  –ö–∞–ª–æ—Ä–∏–∏: {product.kcal_100g} –∫–∫–∞–ª/100–≥" if product.kcal_100g else "  –ö–∞–ª–æ—Ä–∏–∏: –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
                print(f"  –ë–µ–ª–∫–∏: {product.protein_100g}–≥/100–≥" if product.protein_100g else "  –ë–µ–ª–∫–∏: –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
                print(f"  –ñ–∏—Ä—ã: {product.fat_100g}–≥/100–≥" if product.fat_100g else "  –ñ–∏—Ä—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
                print(f"  –£–≥–ª–µ–≤–æ–¥—ã: {product.carb_100g}–≥/100–≥" if product.carb_100g else "  –£–≥–ª–µ–≤–æ–¥—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            
            return len(products) > 0
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –í–∫—É—Å–í–∏–ª–ª–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –°–∞–º–æ–∫–∞—Ç
    samokat_success = await test_samokat()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –í–∫—É—Å–í–∏–ª–ª
    vkusvill_success = await test_vkusvill()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  –°–∞–º–æ–∫–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if samokat_success else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"  –í–∫—É—Å–í–∏–ª–ª: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if vkusvill_success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if samokat_success and vkusvill_success:
        print("\nüéâ –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä—Å–µ—Ä—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        return False

if __name__ == '__main__':
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
