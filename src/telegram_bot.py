"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã
"""
import asyncio
import os
import logging
from typing import Dict, Any, Optional
from pathlib import Path
import json
import tempfile

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from src.main import FoodScraper, load_config
from src.utils.logger import setup_logger


class FoodScraperBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.bot_token = config.get('telegram_bot_token')
        self.allowed_users = config.get('telegram_allowed_users', [])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = setup_logger('telegram_bot', 'INFO', config.get('log_file'))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.application = Application.builder().token(self.bot_token).build()
        self._setup_handlers()
        
        # –ö—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        self.active_tasks = {}
        
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –ø–∞—Ä—Å–µ—Ä–∞
        self.application.add_handler(CommandHandler("scrape", self.scrape_command))
        self.application.add_handler(CommandHandler("sources", self.sources_command))
        self.application.add_handler(CommandHandler("categories", self.categories_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        welcome_text = """
ü§ñ **–ë–æ—Ç-–ø–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤–æ–π –µ–¥—ã**

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/scrape - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
/sources - –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏
/categories - –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
/status - –°—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏.
        """
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="scrape_menu")],
            [InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="sources_menu")],
            [InlineKeyboardButton("üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories_menu")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="status")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        if not self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á

**–ü–∞—Ä—Å–∏–Ω–≥:**
/scrape - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
/sources - –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
/categories - –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
‚Ä¢ `/scrape` - –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –°–∞–º–æ–∫–∞—Ç–∞ –≤ –ú–æ—Å–∫–≤–µ
‚Ä¢ `/sources samokat lavka` - –ø–∞—Ä—Å–∏–Ω–≥ –°–∞–º–æ–∫–∞—Ç–∞ –∏ –õ–∞–≤–∫–∏
‚Ä¢ `/categories –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ —Å–∞–ª–∞—Ç—ã` - –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:**
‚Ä¢ samokat - –°–∞–º–æ–∫–∞—Ç
‚Ä¢ lavka - –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞  
‚Ä¢ vkusvill - –í–∫—É—Å–í–∏–ª–ª

**–§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:**
‚Ä¢ CSV - —Ç–∞–±–ª–∏—Ü–∞ Excel
‚Ä¢ JSONL - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ SQLite - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
        
    async def scrape_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /scrape"""
        if not self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args if context.args else []
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        scrape_config = self.config.copy()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if args:
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
            if 'samokat' in args or 'lavka' in args or 'vkusvill' in args:
                sources = [arg for arg in args if arg in ['samokat', 'lavka', 'vkusvill']]
                scrape_config['sources'] = sources
                
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = [arg for arg in args if arg not in ['samokat', 'lavka', 'vkusvill']]
            if categories:
                scrape_config['categories'] = categories
                
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await self._start_scraping(update, context, scrape_config)
        
    async def sources_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /sources"""
        if not self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        keyboard = [
            [InlineKeyboardButton("–°–∞–º–æ–∫–∞—Ç", callback_data="source_samokat")],
            [InlineKeyboardButton("–Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞", callback_data="source_lavka")],
            [InlineKeyboardButton("–í–∫—É—Å–í–∏–ª–ª", callback_data="source_vkusvill")],
            [InlineKeyboardButton("–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="source_all")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üîç **–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:**\n\n"
            "‚Ä¢ –°–∞–º–æ–∫–∞—Ç - –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è\n"
            "‚Ä¢ –Ø–Ω–¥–µ–∫—Å.–õ–∞–≤–∫–∞ - –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥–æ—Ç–æ–≤–∞—è –µ–¥–∞\n"
            "‚Ä¢ –í–∫—É—Å–í–∏–ª–ª - —Ñ–µ—Ä–º–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    async def categories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /categories"""
        if not self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        keyboard = [
            [InlineKeyboardButton("–ì–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞", callback_data="cat_ready_food")],
            [InlineKeyboardButton("–°–∞–ª–∞—Ç—ã", callback_data="cat_salads")],
            [InlineKeyboardButton("–°—É–ø—ã", callback_data="cat_soups")],
            [InlineKeyboardButton("–ö—É–ª–∏–Ω–∞—Ä–∏—è", callback_data="cat_cooking")],
            [InlineKeyboardButton("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="cat_all")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üè∑Ô∏è **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:**\n\n"
            "‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞\n"
            "‚Ä¢ –°–∞–ª–∞—Ç—ã - —Å–≤–µ–∂–∏–µ –∏ –≥–æ—Ç–æ–≤—ã–µ —Å–∞–ª–∞—Ç—ã\n"
            "‚Ä¢ –°—É–ø—ã - –≥–æ—Ä—è—á–∏–µ –∏ —Ö–æ–ª–æ–¥–Ω—ã–µ —Å—É–ø—ã\n"
            "‚Ä¢ –ö—É–ª–∏–Ω–∞—Ä–∏—è - –≤—ã–ø–µ—á–∫–∞ –∏ –¥–µ—Å–µ—Ä—Ç—ã",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        if not self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        user_id = update.effective_user.id
        
        if user_id in self.active_tasks:
            task_info = self.active_tasks[user_id]
            status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏:**

üÜî ID: {task_info['task_id']}
üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {task_info['start_time']}
üîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(task_info['sources'])}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(task_info['categories']) if task_info['categories'] else '–í—Å–µ'}
‚è±Ô∏è –°—Ç–∞—Ç—É—Å: {task_info['status']}
üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {task_info.get('progress', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            """
        else:
            status_text = "üìä **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /scrape –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞."
            
        await update.message.reply_text(status_text, parse_mode='Markdown')
        
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        if not self._is_user_allowed(update.effective_user.id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "main_menu":
            await self._show_main_menu(query)
        elif data == "scrape_menu":
            await self._show_scrape_menu(query)
        elif data.startswith("source_"):
            await self._handle_source_selection(query, data)
        elif data.startswith("cat_"):
            await self._handle_category_selection(query, data)
        elif data == "start_scraping":
            await self._start_scraping_from_menu(query, context)
        elif data == "status":
            await self._show_status(query)
            
    async def _show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="scrape_menu")],
            [InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="sources_menu")],
            [InlineKeyboardButton("üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories_menu")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç—É—Å", callback_data="status")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "ü§ñ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    async def _show_scrape_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        keyboard = [
            [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data="start_scraping")],
            [InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="sources_menu")],
            [InlineKeyboardButton("üè∑Ô∏è –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories_menu")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üöÄ **–ú–µ–Ω—é –ø–∞—Ä—Å–∏–Ω–≥–∞**\n\n"
            "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"üìç –ì–æ—Ä–æ–¥: {self.config.get('city', '–ú–æ—Å–∫–≤–∞')}\n"
            f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(self.config.get('sources', ['samokat']))}\n"
            f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(self.config.get('categories', [])) or '–í—Å–µ'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    async def _handle_source_selection(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        source = data.replace("source_", "")
        
        if source == "all":
            self.config['sources'] = ['samokat', 'lavka', 'vkusvill']
        else:
            if source not in self.config.get('sources', []):
                self.config['sources'] = [source]
            else:
                self.config['sources'].remove(source)
                
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await self._show_scrape_menu(query)
        
    async def _handle_category_selection(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        category = data.replace("cat_", "")
        
        if category == "all":
            self.config['categories'] = []
        else:
            category_map = {
                "ready_food": "–≥–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞",
                "salads": "—Å–∞–ª–∞—Ç—ã", 
                "soups": "—Å—É–ø—ã",
                "cooking": "–∫—É–ª–∏–Ω–∞—Ä–∏—è"
            }
            
            if category in category_map:
                cat_name = category_map[category]
                if cat_name not in self.config.get('categories', []):
                    self.config['categories'] = [cat_name]
                else:
                    self.config['categories'].remove(cat_name)
                    
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await self._show_scrape_menu(query)
        
    async def _start_scraping_from_menu(self, query, context):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ –º–µ–Ω—é"""
        await query.edit_message_text("üöÄ **–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...**\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        await self._start_scraping(query, context, self.config)
        
    async def _start_scraping(self, update, context, scrape_config):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        user_id = update.effective_user.id if hasattr(update, 'effective_user') else update.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task_id = f"task_{user_id}_{int(asyncio.get_event_loop().time())}"
        
        task_info = {
            'task_id': task_id,
            'start_time': asyncio.get_event_loop().time(),
            'sources': scrape_config.get('sources', ['samokat']),
            'categories': scrape_config.get('categories', []),
            'status': '–ó–∞–ø—É—Å–∫...',
            'progress': '0%'
        }
        
        self.active_tasks[user_id] = task_info
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._run_scraping_task(update, context, scrape_config, task_info))
        
    async def _run_scraping_task(self, update, context, scrape_config, task_info):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        user_id = update.effective_user.id if hasattr(update, 'effective_user') else update.from_user.id
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            task_info['status'] = '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...'
            task_info['progress'] = '10%'
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–µ–π–ø–µ—Ä
            scraper = FoodScraper(scrape_config)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            task_info['status'] = '–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...'
            task_info['progress'] = '30%'
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            result = await scraper.run()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            task_info['status'] = '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...'
            task_info['progress'] = '80%'
            
            if result:
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                export_files = await self._export_data(scraper, user_id)
                
                task_info['status'] = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
                task_info['progress'] = '100%'
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                await self._send_results(update, context, export_files, task_info)
                
            else:
                task_info['status'] = '–û—à–∏–±–∫–∞'
                await update.message.reply_text("‚ùå **–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞**\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
                
        except Exception as e:
            task_info['status'] = f'–û—à–∏–±–∫–∞: {str(e)}'
            await update.message.reply_text(f"‚ùå **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:**\n\n{str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if user_id in self.active_tasks:
                del self.active_tasks[user_id]
                
    async def _export_data(self, scraper, user_id):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
        export_files = {}
        
        try:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            csv_file = f"data/out/products_{user_id}.csv"
            await scraper.export_csv(csv_file)
            export_files['csv'] = csv_file
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSONL
            jsonl_file = f"data/out/products_{user_id}.jsonl"
            await scraper.export_jsonl(jsonl_file)
            export_files['jsonl'] = jsonl_file
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ SQLite
            sqlite_file = f"data/out/products_{user_id}.db"
            await scraper.export_sqlite(sqlite_file)
            export_files['sqlite'] = sqlite_file
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
        return export_files
        
    async def _send_results(self, update, context, export_files, task_info):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        results_text = f"""
‚úÖ **–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(task_info['sources'])}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(task_info['categories']) if task_info['categories'] else '–í—Å–µ'}
‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {int(asyncio.get_event_loop().time() - task_info['start_time'])} —Å–µ–∫

üìÅ **–§–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:**
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(results_text, parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        for format_name, file_path in export_files.items():
            if os.path.exists(file_path):
                try:
                    with open(file_path, 'rb') as f:
                        await context.bot.send_document(
                            chat_id=update.effective_chat.id,
                            document=f,
                            filename=f"products_{format_name}.{format_name}",
                            caption=f"üìÅ –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_name.upper()}"
                        )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self._is_user_allowed(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return
            
        text = update.message.text.lower()
        
        if any(word in text for word in ['–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞']):
            await self.help_command(update, context)
        elif any(word in text for word in ['—Å—Ç–∞—Ç—É—Å', 'status']):
            await self.status_command(update, context)
        elif any(word in text for word in ['–ø–∞—Ä—Å–∏–Ω–≥', 'scrape', '–∑–∞–ø—É—Å–∫']):
            await self.scrape_command(update, context)
        else:
            await update.message.reply_text(
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
            
    def _is_user_allowed(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.allowed_users:
            return True  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö
        return user_id in self.allowed_users
        
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        self.logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        try:
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        asyncio.create_task(self.application.shutdown())
